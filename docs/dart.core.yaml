"name" : "dart.core"
"comment" : ""
"variables" : 
"functions" : 
  "_combineSurrogatePair" : 
    "name" : "_combineSurrogatePair"
    "qualifiedname" : "dart.core._combineSurrogatePair"
    "comment" : ""
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.int"
    "parameters" : 
      "start" : 
        "name" : "start"
        "qualifiedname" : "dart.core._combineSurrogatePair#start"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.int"
        "value" : "null"
      "end" : 
        "name" : "end"
        "qualifiedname" : "dart.core._combineSurrogatePair#end"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.int"
        "value" : "null"
  "_isTrailSurrogate" : 
    "name" : "_isTrailSurrogate"
    "qualifiedname" : "dart.core._isTrailSurrogate"
    "comment" : ""
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.bool"
    "parameters" : 
      "code" : 
        "name" : "code"
        "qualifiedname" : "dart.core._isTrailSurrogate#code"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.int"
        "value" : "null"
  "_isLeadSurrogate" : 
    "name" : "_isLeadSurrogate"
    "qualifiedname" : "dart.core._isLeadSurrogate"
    "comment" : ""
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.bool"
    "parameters" : 
      "code" : 
        "name" : "code"
        "qualifiedname" : "dart.core._isLeadSurrogate#code"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.int"
        "value" : "null"
  "print" : 
    "name" : "print"
    "qualifiedname" : "dart.core.print"
    "comment" : ""
    "type" : "method"
    "static" : "false"
    "return" : "void"
    "parameters" : 
      "object" : 
        "name" : "object"
        "qualifiedname" : "dart.core.print#object"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Object"
        "value" : "null"
  "identical" : 
    "name" : "identical"
    "qualifiedname" : "dart.core.identical"
    "comment" : "<p>Check whether two references are to the same object.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.bool"
    "parameters" : 
      "a" : 
        "name" : "a"
        "qualifiedname" : "dart.core.identical#a"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Object"
        "value" : "null"
      "b" : 
        "name" : "b"
        "qualifiedname" : "dart.core.identical#b"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Object"
        "value" : "null"
"classes" : 
  "_UnmodifiableMap" : 
    "name" : "_UnmodifiableMap"
    "qualifiedname" : "dart.core._UnmodifiableMap"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Map"
    "variables" : 
      "_map" : 
        "name" : "_map"
        "qualifiedname" : "dart.core._UnmodifiableMap._map"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
    "methods" : 
      "_UnmodifiableMap" : 
        "name" : "_UnmodifiableMap"
        "qualifiedname" : "dart.core._UnmodifiableMap._UnmodifiableMap"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_map" : 
            "name" : "_map"
            "qualifiedname" : "dart.core._UnmodifiableMap._UnmodifiableMap#_map"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "containsValue" : 
        "name" : "containsValue"
        "qualifiedname" : "dart.core._UnmodifiableMap.containsValue"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core._UnmodifiableMap.containsValue#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "containsKey" : 
        "name" : "containsKey"
        "qualifiedname" : "dart.core._UnmodifiableMap.containsKey"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core._UnmodifiableMap.containsKey#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core._UnmodifiableMap.[]"
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core._UnmodifiableMap.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core._UnmodifiableMap.[]#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "[]=" : 
        "name" : "[]="
        "qualifiedname" : "dart.core._UnmodifiableMap.[]="
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core._UnmodifiableMap.[]=#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core._UnmodifiableMap.K"
            "value" : "null"
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core._UnmodifiableMap.[]=#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core._UnmodifiableMap.V"
            "value" : "null"
      "putIfAbsent" : 
        "name" : "putIfAbsent"
        "qualifiedname" : "dart.core._UnmodifiableMap.putIfAbsent"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core._UnmodifiableMap.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core._UnmodifiableMap.putIfAbsent#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core._UnmodifiableMap.K"
            "value" : "null"
          "ifAbsent" : 
            "name" : "ifAbsent"
            "qualifiedname" : "dart.core._UnmodifiableMap.putIfAbsent#ifAbsent"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "addAll" : 
        "name" : "addAll"
        "qualifiedname" : "dart.core._UnmodifiableMap.addAll"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core._UnmodifiableMap.addAll#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "remove" : 
        "name" : "remove"
        "qualifiedname" : "dart.core._UnmodifiableMap.remove"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core._UnmodifiableMap.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core._UnmodifiableMap.remove#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "clear" : 
        "name" : "clear"
        "qualifiedname" : "dart.core._UnmodifiableMap.clear"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "forEach" : 
        "name" : "forEach"
        "qualifiedname" : "dart.core._UnmodifiableMap.forEach"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "f" : 
            "name" : "f"
            "qualifiedname" : "dart.core._UnmodifiableMap.forEach#f"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "keys" : 
        "name" : "keys"
        "qualifiedname" : "dart.core._UnmodifiableMap.keys"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
      "values" : 
        "name" : "values"
        "qualifiedname" : "dart.core._UnmodifiableMap.values"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core._UnmodifiableMap.length"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "isEmpty" : 
        "name" : "isEmpty"
        "qualifiedname" : "dart.core._UnmodifiableMap.isEmpty"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNotEmpty" : 
        "name" : "isNotEmpty"
        "qualifiedname" : "dart.core._UnmodifiableMap.isNotEmpty"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "Uri" : 
    "name" : "Uri"
    "qualifiedname" : "dart.core.Uri"
    "comment" : "<p>A parsed URI, as specified by RFC-3986, http://tools.ietf.org/html/rfc3986.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "_port" : 
        "name" : "_port"
        "qualifiedname" : "dart.core.Uri._port"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
      "_path" : 
        "name" : "_path"
        "qualifiedname" : "dart.core.Uri._path"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.String"
      "scheme" : 
        "name" : "scheme"
        "qualifiedname" : "dart.core.Uri.scheme"
        "comment" : "<p>Returns the scheme component.</p> <p>Returns the empty string if there is no scheme component.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "userInfo" : 
        "name" : "userInfo"
        "qualifiedname" : "dart.core.Uri.userInfo"
        "comment" : "<p>Returns the user info part of the authority component.</p> <p>Returns the empty string if there is no user info in the authority component.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "host" : 
        "name" : "host"
        "qualifiedname" : "dart.core.Uri.host"
        "comment" : "<p>Returns the host part of the authority component.</p> <p>Returns the empty string if there is no authority component and hence no host.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "query" : 
        "name" : "query"
        "qualifiedname" : "dart.core.Uri.query"
        "comment" : "<p>Returns the query component. The returned query is encoded. To get direct access to the decoded query use <code>queryParameters</code>.</p> <p>Returns the empty string if there is no query component.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "fragment" : 
        "name" : "fragment"
        "qualifiedname" : "dart.core.Uri.fragment"
        "comment" : "<p>Returns the fragment identifier component.</p> <p>Returns the empty string if there is no fragment identifier component.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "_pathSegments" : 
        "name" : "_pathSegments"
        "qualifiedname" : "dart.core.Uri._pathSegments"
        "comment" : "<p>Cache the computed return value of <code>pathSegements</code>.</p>"
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.List"
      "_queryParameters" : 
        "name" : "_queryParameters"
        "qualifiedname" : "dart.core.Uri._queryParameters"
        "comment" : "<p>Cache the computed return value of <code>queryParameters</code>.</p>"
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.Map"
      "_splitRe" : 
        "name" : "_splitRe"
        "qualifiedname" : "dart.core.Uri._splitRe"
        "comment" : ""
        "final" : "true"
        "static" : "true"
        "type" : "dart.core.RegExp"
      "_COMPONENT_SCHEME" : 
        "name" : "_COMPONENT_SCHEME"
        "qualifiedname" : "dart.core.Uri._COMPONENT_SCHEME"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_USER_INFO" : 
        "name" : "_COMPONENT_USER_INFO"
        "qualifiedname" : "dart.core.Uri._COMPONENT_USER_INFO"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_HOST" : 
        "name" : "_COMPONENT_HOST"
        "qualifiedname" : "dart.core.Uri._COMPONENT_HOST"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_HOST_IPV6" : 
        "name" : "_COMPONENT_HOST_IPV6"
        "qualifiedname" : "dart.core.Uri._COMPONENT_HOST_IPV6"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_PORT" : 
        "name" : "_COMPONENT_PORT"
        "qualifiedname" : "dart.core.Uri._COMPONENT_PORT"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_PATH" : 
        "name" : "_COMPONENT_PATH"
        "qualifiedname" : "dart.core.Uri._COMPONENT_PATH"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_QUERY_DATA" : 
        "name" : "_COMPONENT_QUERY_DATA"
        "qualifiedname" : "dart.core.Uri._COMPONENT_QUERY_DATA"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_COMPONENT_FRAGMENT" : 
        "name" : "_COMPONENT_FRAGMENT"
        "qualifiedname" : "dart.core.Uri._COMPONENT_FRAGMENT"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_PERCENT" : 
        "name" : "_PERCENT"
        "qualifiedname" : "dart.core.Uri._PERCENT"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_PLUS" : 
        "name" : "_PLUS"
        "qualifiedname" : "dart.core.Uri._PLUS"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_SLASH" : 
        "name" : "_SLASH"
        "qualifiedname" : "dart.core.Uri._SLASH"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_ZERO" : 
        "name" : "_ZERO"
        "qualifiedname" : "dart.core.Uri._ZERO"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_NINE" : 
        "name" : "_NINE"
        "qualifiedname" : "dart.core.Uri._NINE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_COLON" : 
        "name" : "_COLON"
        "qualifiedname" : "dart.core.Uri._COLON"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_AT_SIGN" : 
        "name" : "_AT_SIGN"
        "qualifiedname" : "dart.core.Uri._AT_SIGN"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_UPPER_CASE_A" : 
        "name" : "_UPPER_CASE_A"
        "qualifiedname" : "dart.core.Uri._UPPER_CASE_A"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_UPPER_CASE_F" : 
        "name" : "_UPPER_CASE_F"
        "qualifiedname" : "dart.core.Uri._UPPER_CASE_F"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_LOWER_CASE_A" : 
        "name" : "_LOWER_CASE_A"
        "qualifiedname" : "dart.core.Uri._LOWER_CASE_A"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_LOWER_CASE_F" : 
        "name" : "_LOWER_CASE_F"
        "qualifiedname" : "dart.core.Uri._LOWER_CASE_F"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "_unreservedTable" : 
        "name" : "_unreservedTable"
        "qualifiedname" : "dart.core.Uri._unreservedTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_unreserved2396Table" : 
        "name" : "_unreserved2396Table"
        "qualifiedname" : "dart.core.Uri._unreserved2396Table"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_encodeFullTable" : 
        "name" : "_encodeFullTable"
        "qualifiedname" : "dart.core.Uri._encodeFullTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_schemeTable" : 
        "name" : "_schemeTable"
        "qualifiedname" : "dart.core.Uri._schemeTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_schemeLowerTable" : 
        "name" : "_schemeLowerTable"
        "qualifiedname" : "dart.core.Uri._schemeLowerTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_subDelimitersTable" : 
        "name" : "_subDelimitersTable"
        "qualifiedname" : "dart.core.Uri._subDelimitersTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_pathCharTable" : 
        "name" : "_pathCharTable"
        "qualifiedname" : "dart.core.Uri._pathCharTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
      "_queryCharTable" : 
        "name" : "_queryCharTable"
        "qualifiedname" : "dart.core.Uri._queryCharTable"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dynamic"
    "methods" : 
      "authority" : 
        "name" : "authority"
        "qualifiedname" : "dart.core.Uri.authority"
        "comment" : "<p>Returns the authority component.</p> <p>The authority is formatted from the <code>userInfo</code>, <code>host</code> and <code>port</code> parts.</p> <p>Returns the empty string if there is no authority component.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "port" : 
        "name" : "port"
        "qualifiedname" : "dart.core.Uri.port"
        "comment" : "<p>Returns the port part of the authority component.</p> <p>Returns 0 if there is no port in the authority component.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "path" : 
        "name" : "path"
        "qualifiedname" : "dart.core.Uri.path"
        "comment" : "<p>Returns the path component.</p> <p>The returned path is encoded. To get direct access to the decoded path use <code>pathSegments</code>.</p> <p>Returns the empty string if there is no path component.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "parse" : 
        "name" : "parse"
        "qualifiedname" : "dart.core.Uri.parse"
        "comment" : "<p>Creates a new URI object by parsing a URI string.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.Uri"
        "parameters" : 
          "uri" : 
            "name" : "uri"
            "qualifiedname" : "dart.core.Uri.parse#uri"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "Uri._fromMatch" : 
        "name" : "Uri._fromMatch"
        "qualifiedname" : "dart.core.Uri.Uri._fromMatch"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "m" : 
            "name" : "m"
            "qualifiedname" : "dart.core.Uri.Uri._fromMatch#m"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Match"
            "value" : "null"
      "Uri" : 
        "name" : "Uri"
        "qualifiedname" : "dart.core.Uri.Uri"
        "comment" : "<p>Creates a new URI from its components.</p> <p>Each component is set through a named argument. Any number of components can be provided. The default value for the components not provided is the empry string, except for <code>port</code> which has a default value of 0. The <code>path</code> and <code>query</code> components can be set using two different named arguments.</p> <p>The scheme component is set through <code>scheme</code>. The scheme is normalized to all lowercase letters.</p> <p>The user info part of the authority component is set through <code>userInfo</code>.</p> <p>The host part of the authority component is set through <code>host</code>. The host can either be a hostname, a IPv4 address or an IPv6 address, contained in '<code>' and '</code>'. If the host contains a ':' character, the '<code>' and '</code>' are added if not already provided.</p> <p>The port part of the authority component is set through <code>port</code>. The port is normalized for scheme http and https where port 80 and port 443 respectively is set.</p> <p>The path component is set through either <code>path</code> or <code>pathSegments</code>. When <code>path</code> is used, the provided string is expected to be fully percent-encoded, and is used in its literal form. When <code>pathSegments</code> is used, each of the provided segments is percent-encoded and joined using the forward slash separator. The percent-encoding of the path segments encodes all characters except for the unreserved characters and the following list of characters: <code>!$&amp;'()*+,;=:@</code>. If the other components calls for an absolute path a leading slash <code>/</code> is prepended if not already there.</p> <p>The query component is set through either <code>query</code> or <code>queryParameters</code>. When <code>query</code> is used the provided string is expected to be fully percent-encoded and is used in its literal form. When <code>queryParameters</code> is used the query is built from the provided map. Each key and value in the map is percent-encoded and joined using equal and ampersand characters. The percent-encoding of the keys and values encodes all characters except for the unreserved characters.</p> <p>The fragment component is set through <code>fragment</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "scheme" : 
            "name" : "scheme"
            "qualifiedname" : "dart.core.Uri.Uri#scheme"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
          "userInfo" : 
            "name" : "userInfo"
            "qualifiedname" : "dart.core.Uri.Uri#userInfo"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
          "host" : 
            "name" : "host"
            "qualifiedname" : "dart.core.Uri.Uri#host"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
          "port" : 
            "name" : "port"
            "qualifiedname" : "dart.core.Uri.Uri#port"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dynamic"
            "value" : "0"
          "path" : 
            "name" : "path"
            "qualifiedname" : "dart.core.Uri.Uri#path"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "pathSegments" : 
            "name" : "pathSegments"
            "qualifiedname" : "dart.core.Uri.Uri#pathSegments"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "query" : 
            "name" : "query"
            "qualifiedname" : "dart.core.Uri.Uri#query"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "queryParameters" : 
            "name" : "queryParameters"
            "qualifiedname" : "dart.core.Uri.Uri#queryParameters"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "fragment" : 
            "name" : "fragment"
            "qualifiedname" : "dart.core.Uri.Uri#fragment"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dynamic"
            "value" : "\"\""
      "Uri.http" : 
        "name" : "Uri.http"
        "qualifiedname" : "dart.core.Uri.Uri.http"
        "comment" : "<p>Creates a new <code>http</code> URI from authority, path and query.</p> <p>Examples:</p> <pre><code>// Create the URI http://example.org/path?q=abc. new Uri.http(\"google.com\", \"/search\", { \"q\" : \"dart\" });http://example.org/path?q=abc. new Uri.http(\"user:pass@localhost:8080, \"\");  // http://user:pass@localhost:8080/ new Uri.http(\"example.org, \"a b\");  // http://example.org/a%20b new Uri.http(\"example.org, \"/a%2F\");  // http://example.org/a%25%2F </code></pre> <p>The <code>scheme</code> is always set to <code>http</code>.</p> <p>The <code>userInfo</code>, <code>host</code> and <code>port</code> components are set from the <code>authority</code> argument.</p> <p>The <code>path</code> component is set from the <code>unencodedPath</code> argument. The path passed must not be encoded as this constructor encodes the path.</p> <p>The <code>query</code> component is set from the optional <code>queryParameters</code> argument.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Uri"
        "parameters" : 
          "authority" : 
            "name" : "authority"
            "qualifiedname" : "dart.core.Uri.Uri.http#authority"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "unencodedPath" : 
            "name" : "unencodedPath"
            "qualifiedname" : "dart.core.Uri.Uri.http#unencodedPath"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "queryParameters" : 
            "name" : "queryParameters"
            "qualifiedname" : "dart.core.Uri.Uri.http#queryParameters"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "Uri.https" : 
        "name" : "Uri.https"
        "qualifiedname" : "dart.core.Uri.Uri.https"
        "comment" : "<p>Creates a new <code>https</code> URI from authority, path and query.</p> <p>This constructor is the same as <code>Uri.http</code> except for the scheme which is set to <code>https</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Uri"
        "parameters" : 
          "authority" : 
            "name" : "authority"
            "qualifiedname" : "dart.core.Uri.Uri.https#authority"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "unencodedPath" : 
            "name" : "unencodedPath"
            "qualifiedname" : "dart.core.Uri.Uri.https#unencodedPath"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "queryParameters" : 
            "name" : "queryParameters"
            "qualifiedname" : "dart.core.Uri.Uri.https#queryParameters"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "_makeHttpUri" : 
        "name" : "_makeHttpUri"
        "qualifiedname" : "dart.core.Uri._makeHttpUri"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.Uri"
        "parameters" : 
          "scheme" : 
            "name" : "scheme"
            "qualifiedname" : "dart.core.Uri._makeHttpUri#scheme"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "authority" : 
            "name" : "authority"
            "qualifiedname" : "dart.core.Uri._makeHttpUri#authority"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "unencodedPath" : 
            "name" : "unencodedPath"
            "qualifiedname" : "dart.core.Uri._makeHttpUri#unencodedPath"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "queryParameters" : 
            "name" : "queryParameters"
            "qualifiedname" : "dart.core.Uri._makeHttpUri#queryParameters"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "pathSegments" : 
        "name" : "pathSegments"
        "qualifiedname" : "dart.core.Uri.pathSegments"
        "comment" : "<p>Returns the URI path split into its segments. Each of the segments in the returned list have been decoded. If the path is empty the empty list will be returned. A leading slash <code>/</code> does not affect the segments returned.</p> <p>The returned list is unmodifiable and will throw <code>UnsupportedError</code> on any calls that would mutate it.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
      "queryParameters" : 
        "name" : "queryParameters"
        "qualifiedname" : "dart.core.Uri.queryParameters"
        "comment" : "<p>Returns the URI query split into a map according to the rules specified for FORM post in the <a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4 \" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned map has been decoded. If there is no query the empty map is returned.</p> <p>Keys in the query string that have no value are mapped to the empty string.</p> <p>The returned map is unmodifiable and will throw <code>UnsupportedError</code> on any calls that would mutate it.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
      "_makeScheme" : 
        "name" : "_makeScheme"
        "qualifiedname" : "dart.core.Uri._makeScheme"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "scheme" : 
            "name" : "scheme"
            "qualifiedname" : "dart.core.Uri._makeScheme#scheme"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_makePath" : 
        "name" : "_makePath"
        "qualifiedname" : "dart.core.Uri._makePath"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "path" : 
            "name" : "path"
            "qualifiedname" : "dart.core.Uri._makePath#path"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "pathSegments" : 
            "name" : "pathSegments"
            "qualifiedname" : "dart.core.Uri._makePath#pathSegments"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
      "_makeQuery" : 
        "name" : "_makeQuery"
        "qualifiedname" : "dart.core.Uri._makeQuery"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "query" : 
            "name" : "query"
            "qualifiedname" : "dart.core.Uri._makeQuery#query"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "queryParameters" : 
            "name" : "queryParameters"
            "qualifiedname" : "dart.core.Uri._makeQuery#queryParameters"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "_makeFragment" : 
        "name" : "_makeFragment"
        "qualifiedname" : "dart.core.Uri._makeFragment"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "fragment" : 
            "name" : "fragment"
            "qualifiedname" : "dart.core.Uri._makeFragment#fragment"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_normalize" : 
        "name" : "_normalize"
        "qualifiedname" : "dart.core.Uri._normalize"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "component" : 
            "name" : "component"
            "qualifiedname" : "dart.core.Uri._normalize#component"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_emptyIfNull" : 
        "name" : "_emptyIfNull"
        "qualifiedname" : "dart.core.Uri._emptyIfNull"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "val" : 
            "name" : "val"
            "qualifiedname" : "dart.core.Uri._emptyIfNull#val"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_parseIntOrZero" : 
        "name" : "_parseIntOrZero"
        "qualifiedname" : "dart.core.Uri._parseIntOrZero"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
          "val" : 
            "name" : "val"
            "qualifiedname" : "dart.core.Uri._parseIntOrZero#val"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_eitherOf" : 
        "name" : "_eitherOf"
        "qualifiedname" : "dart.core.Uri._eitherOf"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "val1" : 
            "name" : "val1"
            "qualifiedname" : "dart.core.Uri._eitherOf#val1"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "val2" : 
            "name" : "val2"
            "qualifiedname" : "dart.core.Uri._eitherOf#val2"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "isAbsolute" : 
        "name" : "isAbsolute"
        "qualifiedname" : "dart.core.Uri.isAbsolute"
        "comment" : "<p>Returns whether the URI is absolute.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "_merge" : 
        "name" : "_merge"
        "qualifiedname" : "dart.core.Uri._merge"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "base" : 
            "name" : "base"
            "qualifiedname" : "dart.core.Uri._merge#base"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "reference" : 
            "name" : "reference"
            "qualifiedname" : "dart.core.Uri._merge#reference"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_hasDotSegments" : 
        "name" : "_hasDotSegments"
        "qualifiedname" : "dart.core.Uri._hasDotSegments"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "path" : 
            "name" : "path"
            "qualifiedname" : "dart.core.Uri._hasDotSegments#path"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_removeDotSegments" : 
        "name" : "_removeDotSegments"
        "qualifiedname" : "dart.core.Uri._removeDotSegments"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "path" : 
            "name" : "path"
            "qualifiedname" : "dart.core.Uri._removeDotSegments#path"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "resolve" : 
        "name" : "resolve"
        "qualifiedname" : "dart.core.Uri.resolve"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Uri"
        "parameters" : 
          "uri" : 
            "name" : "uri"
            "qualifiedname" : "dart.core.Uri.resolve#uri"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "resolveUri" : 
        "name" : "resolveUri"
        "qualifiedname" : "dart.core.Uri.resolveUri"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Uri"
        "parameters" : 
          "reference" : 
            "name" : "reference"
            "qualifiedname" : "dart.core.Uri.resolveUri#reference"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Uri"
            "value" : "null"
      "hasAuthority" : 
        "name" : "hasAuthority"
        "qualifiedname" : "dart.core.Uri.hasAuthority"
        "comment" : "<p>Returns whether the URI has an <code>authority</code> component.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "origin" : 
        "name" : "origin"
        "qualifiedname" : "dart.core.Uri.origin"
        "comment" : "<p>Returns the origin of the URI in the form scheme://host:port for the schemes http and https.</p> <p>It is an error if the scheme is not \"http\" or \"https\".</p> <p>See: http://www.w3.org/TR/2011/WD-html5-20110405/origin-0.html#origin</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "_writeAuthority" : 
        "name" : "_writeAuthority"
        "qualifiedname" : "dart.core.Uri._writeAuthority"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "ss" : 
            "name" : "ss"
            "qualifiedname" : "dart.core.Uri._writeAuthority#ss"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.StringSink"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.Uri.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "==" : 
        "name" : "=="
        "qualifiedname" : "dart.core.Uri.=="
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Uri.==#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "hashCode" : 
        "name" : "hashCode"
        "qualifiedname" : "dart.core.Uri.hashCode"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "_addIfNonEmpty" : 
        "name" : "_addIfNonEmpty"
        "qualifiedname" : "dart.core.Uri._addIfNonEmpty"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "void"
        "parameters" : 
          "sb" : 
            "name" : "sb"
            "qualifiedname" : "dart.core.Uri._addIfNonEmpty#sb"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.StringBuffer"
            "value" : "null"
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Uri._addIfNonEmpty#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "first" : 
            "name" : "first"
            "qualifiedname" : "dart.core.Uri._addIfNonEmpty#first"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "second" : 
            "name" : "second"
            "qualifiedname" : "dart.core.Uri._addIfNonEmpty#second"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "encodeComponent" : 
        "name" : "encodeComponent"
        "qualifiedname" : "dart.core.Uri.encodeComponent"
        "comment" : "<p>Encode the string <code>component</code> using percent-encoding to make it safe for literal use as a URI component.</p> <p>All characters except uppercase and lowercase letters, digits and the characters <code>!$&amp;'()*+,;=:@</code> are percent-encoded. This is the set of characters specified in RFC 2396 and the which is specified for the encodeUriComponent in ECMA-262 version 5.1.</p> <p>When manually encoding path segments or query components remember to encode each part separately before building the path or query string.</p> <p>For encoding the query part consider using <code>encodeQueryComponent</code>.</p> <p>To avoid the need for explicitly encoding use the <code>pathSegments</code> and <code>queryParameters</code> optional named arguments when constructing a <code>Uri</code>.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "component" : 
            "name" : "component"
            "qualifiedname" : "dart.core.Uri.encodeComponent#component"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "encodeQueryComponent" : 
        "name" : "encodeQueryComponent"
        "qualifiedname" : "dart.core.Uri.encodeQueryComponent"
        "comment" : "<p>Encode the string <code>component</code> according to the HTML 4.01 rules for encoding the posting of a HTML form as a query string component.</p> <p>Spaces will be replaced with plus and all characters except for uppercase and lowercase letters, decimal digits and the characters <code>-._~</code>. Note that the set of characters encoded is a superset of what HTML 4.01 says as it refers to RFC 1738 for reserved characters.</p> <p>When manually encoding query components remember to encode each part separately before building the query string.</p> <p>To avoid the need for explicitly encoding the query use the <code>queryParameters</code> optional named arguments when constructing a <code>Uri</code>.</p> <p>See http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for more details.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "component" : 
            "name" : "component"
            "qualifiedname" : "dart.core.Uri.encodeQueryComponent#component"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "decodeComponent" : 
        "name" : "decodeComponent"
        "qualifiedname" : "dart.core.Uri.decodeComponent"
        "comment" : "<p>Decodes the percent-encoding in <code>encodedComponent</code>.</p> <p>Note that decoding a URI component might change its meaning as some of the decoded characters could be characters with are delimiters for a given URI componene type. Always split a URI component using the delimiters for the component before decoding the individual parts.</p> <p>For handling the <code>path</code> and <code>query</code> components consider using <code>pathSegments</code> and <code>queryParameters</code> to get the separated and decoded component.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "encodedComponent" : 
            "name" : "encodedComponent"
            "qualifiedname" : "dart.core.Uri.decodeComponent#encodedComponent"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "decodeQueryComponent" : 
        "name" : "decodeQueryComponent"
        "qualifiedname" : "dart.core.Uri.decodeQueryComponent"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "encodedComponent" : 
            "name" : "encodedComponent"
            "qualifiedname" : "dart.core.Uri.decodeQueryComponent#encodedComponent"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "encodeFull" : 
        "name" : "encodeFull"
        "qualifiedname" : "dart.core.Uri.encodeFull"
        "comment" : "<p>Encode the string <code>uri</code> using percent-encoding to make it safe for literal use as a full URI.</p> <p>All characters except uppercase and lowercase letters, digits and the characters <code>!#$&amp;'()*+,-./:;=?@_~</code> are percent-encoded. This is the set of characters specified in in ECMA-262 version 5.1 for the encodeURI function .</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "uri" : 
            "name" : "uri"
            "qualifiedname" : "dart.core.Uri.encodeFull#uri"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "decodeFull" : 
        "name" : "decodeFull"
        "qualifiedname" : "dart.core.Uri.decodeFull"
        "comment" : "<p>Decodes the percent-encoding in <code>uri</code>.</p> <p>Note that decoding a full URI might change its meaning as some of the decoded characters could be reserved characters. In most cases an encoded URI should be parsed into components using <code>Uri.parse</code> before decoding the separate components.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "uri" : 
            "name" : "uri"
            "qualifiedname" : "dart.core.Uri.decodeFull#uri"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "splitQueryString" : 
        "name" : "splitQueryString"
        "qualifiedname" : "dart.core.Uri.splitQueryString"
        "comment" : "<p>Returns the <code>query</code> split into a map according to the rules specified for FORM post in the <a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4 \" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned map has been decoded. If the <code>query</code> is the empty string an empty map is returned.</p> <p>Keys in the query string that have no value are mapped to the empty string.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.Map"
        "parameters" : 
          "query" : 
            "name" : "query"
            "qualifiedname" : "dart.core.Uri.splitQueryString#query"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "_uriEncode" : 
        "name" : "_uriEncode"
        "qualifiedname" : "dart.core.Uri._uriEncode"
        "comment" : "<p>This is the internal implementation of JavaScript's encodeURI function. It encodes all characters in the string <code>text</code> except for those that appear in <code>canonicalTable</code>, and returns the escaped string.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "canonicalTable" : 
            "name" : "canonicalTable"
            "qualifiedname" : "dart.core.Uri._uriEncode#canonicalTable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "text" : 
            "name" : "text"
            "qualifiedname" : "dart.core.Uri._uriEncode#text"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "spaceToPlus" : 
            "name" : "spaceToPlus"
            "qualifiedname" : "dart.core.Uri._uriEncode#spaceToPlus"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
      "_hexCharPairToByte" : 
        "name" : "_hexCharPairToByte"
        "qualifiedname" : "dart.core.Uri._hexCharPairToByte"
        "comment" : "<p>Convert a byte (2 character hex sequence) in string <code>s</code> starting at position <code>pos</code> to its ordinal value</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
          "s" : 
            "name" : "s"
            "qualifiedname" : "dart.core.Uri._hexCharPairToByte#s"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "pos" : 
            "name" : "pos"
            "qualifiedname" : "dart.core.Uri._hexCharPairToByte#pos"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "_uriDecode" : 
        "name" : "_uriDecode"
        "qualifiedname" : "dart.core.Uri._uriDecode"
        "comment" : "<p>A JavaScript-like decodeURI function. It unescapes the string <code>text</code> and returns the unescaped string.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "text" : 
            "name" : "text"
            "qualifiedname" : "dart.core.Uri._uriDecode#text"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "plusToSpace" : 
            "name" : "plusToSpace"
            "qualifiedname" : "dart.core.Uri._uriDecode#plusToSpace"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
  "Type" : 
    "name" : "Type"
    "qualifiedname" : "dart.core.Type"
    "comment" : "<p>Runtime representation of a type.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
  "Symbol" : 
    "name" : "Symbol"
    "qualifiedname" : "dart.core.Symbol"
    "comment" : "<p>Opaque name used by mirrors, invocations and <code>Function.apply</code>.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Symbol" : 
        "name" : "Symbol"
        "qualifiedname" : "dart.core.Symbol.Symbol"
        "comment" : "<p>Constructs a new Symbol.</p> <p>An <code>ArgumentError</code> is thrown if <code>name</code> starts with an underscore, or if <code>name</code> is not a <code>String</code>.  An <code>ArgumentError</code> is thrown if <code>name</code> is not an empty string and is not a valid qualified identifier optionally followed by <code>:'=':</code>.</p> <p>The following text is non-normative:</p> <p>Creating non-const Symbol instances may result in larger output.  If possible, use <code>MirrorsUsed</code> in \"dart:mirrors\" to specify which names might be passed to this constructor.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Symbol"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "dart.core.Symbol.Symbol#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
  "StringSink" : 
    "name" : "StringSink"
    "qualifiedname" : "dart.core.StringSink"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "write" : 
        "name" : "write"
        "qualifiedname" : "dart.core.StringSink.write"
        "comment" : "<p>Converts <code>obj</code> to a String by invoking <code>toString</code> and adds the result to <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "obj" : 
            "name" : "obj"
            "qualifiedname" : "dart.core.StringSink.write#obj"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "writeAll" : 
        "name" : "writeAll"
        "qualifiedname" : "dart.core.StringSink.writeAll"
        "comment" : "<p>Iterates over the given <code>objects</code> and <code>write</code>s them in sequence.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "objects" : 
            "name" : "objects"
            "qualifiedname" : "dart.core.StringSink.writeAll#objects"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "separator" : 
            "name" : "separator"
            "qualifiedname" : "dart.core.StringSink.writeAll#separator"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
      "writeln" : 
        "name" : "writeln"
        "qualifiedname" : "dart.core.StringSink.writeln"
        "comment" : "<p>Converts <code>obj</code> to a String by invoking <code>toString</code> and adds the result to <code>this</code>. Then adds a new line.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "obj" : 
            "name" : "obj"
            "qualifiedname" : "dart.core.StringSink.writeln#obj"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.Object"
            "value" : "\"\""
      "writeCharCode" : 
        "name" : "writeCharCode"
        "qualifiedname" : "dart.core.StringSink.writeCharCode"
        "comment" : "<p>Writes the <code>charCode</code> to <code>this</code>.</p> <p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "charCode" : 
            "name" : "charCode"
            "qualifiedname" : "dart.core.StringSink.writeCharCode#charCode"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
  "StringBuffer" : 
    "name" : "StringBuffer"
    "qualifiedname" : "dart.core.StringBuffer"
    "comment" : "<p>The StringBuffer class is useful for concatenating strings efficiently. Only on a call to <code>toString</code> are the strings concatenated to a single String.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.StringSink"
    "variables" : 
    "methods" : 
      "StringBuffer" : 
        "name" : "StringBuffer"
        "qualifiedname" : "dart.core.StringBuffer.StringBuffer"
        "comment" : "<p>Creates the string buffer with an initial content.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "content" : 
            "name" : "content"
            "qualifiedname" : "dart.core.StringBuffer.StringBuffer#content"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.Object"
            "value" : "\"\""
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core.StringBuffer.length"
        "comment" : "<p>Returns the length of the content that has been accumulated so far. This is a constant-time operation.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "isEmpty" : 
        "name" : "isEmpty"
        "qualifiedname" : "dart.core.StringBuffer.isEmpty"
        "comment" : "<p>Returns whether the buffer is empty. This is a constant-time operation.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNotEmpty" : 
        "name" : "isNotEmpty"
        "qualifiedname" : "dart.core.StringBuffer.isNotEmpty"
        "comment" : "<p>Returns whether the buffer is not empty. This is a constant-time operation.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "write" : 
        "name" : "write"
        "qualifiedname" : "dart.core.StringBuffer.write"
        "comment" : "<p>Adds the contents of <code>obj</code>, converted to a string, to the buffer.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "obj" : 
            "name" : "obj"
            "qualifiedname" : "dart.core.StringBuffer.write#obj"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "writeCharCode" : 
        "name" : "writeCharCode"
        "qualifiedname" : "dart.core.StringBuffer.writeCharCode"
        "comment" : "<p>Adds the string representation of <code>charCode</code> to the buffer.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "charCode" : 
            "name" : "charCode"
            "qualifiedname" : "dart.core.StringBuffer.writeCharCode#charCode"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "writeAll" : 
        "name" : "writeAll"
        "qualifiedname" : "dart.core.StringBuffer.writeAll"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "objects" : 
            "name" : "objects"
            "qualifiedname" : "dart.core.StringBuffer.writeAll#objects"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "separator" : 
            "name" : "separator"
            "qualifiedname" : "dart.core.StringBuffer.writeAll#separator"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
      "writeln" : 
        "name" : "writeln"
        "qualifiedname" : "dart.core.StringBuffer.writeln"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "obj" : 
            "name" : "obj"
            "qualifiedname" : "dart.core.StringBuffer.writeln#obj"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.Object"
            "value" : "\"\""
      "clear" : 
        "name" : "clear"
        "qualifiedname" : "dart.core.StringBuffer.clear"
        "comment" : "<p>Clears the string buffer.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.StringBuffer.toString"
        "comment" : "<p>Returns the contents of buffer as a concatenated string.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "RuneIterator" : 
    "name" : "RuneIterator"
    "qualifiedname" : "dart.core.RuneIterator"
    "comment" : "<p><code>Iterator</code> for reading runes (integer Unicode code points) out of a Dart string.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.BidirectionalIterator"
    "variables" : 
      "string" : 
        "name" : "string"
        "qualifiedname" : "dart.core.RuneIterator.string"
        "comment" : "<p>String being iterated.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "_position" : 
        "name" : "_position"
        "qualifiedname" : "dart.core.RuneIterator._position"
        "comment" : "<p>Position before the current code point.</p>"
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
      "_nextPosition" : 
        "name" : "_nextPosition"
        "qualifiedname" : "dart.core.RuneIterator._nextPosition"
        "comment" : "<p>Position after the current code point.</p>"
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
      "_currentCodePoint" : 
        "name" : "_currentCodePoint"
        "qualifiedname" : "dart.core.RuneIterator._currentCodePoint"
        "comment" : "<p>Current code point.</p> <p>If the iterator has hit either end, the <code>_currentCodePoint</code> is null and [: _position == _nextPosition :].</p>"
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
    "methods" : 
      "RuneIterator" : 
        "name" : "RuneIterator"
        "qualifiedname" : "dart.core.RuneIterator.RuneIterator"
        "comment" : "<p>Create an iterator positioned at the beginning of the string.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "string" : 
            "name" : "string"
            "qualifiedname" : "dart.core.RuneIterator.RuneIterator#string"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "RuneIterator.at" : 
        "name" : "RuneIterator.at"
        "qualifiedname" : "dart.core.RuneIterator.RuneIterator.at"
        "comment" : "<p>Create an iterator positioned before the <code>index</code>th code unit of the string.</p> <p>When created, there is no <code>current</code> value. A <code>moveNext</code> will use the rune starting at <code>index</code> the current value, and a <code>movePrevious</code> will use the rune ending just before <code>index</code> as the the current value.</p> <p>It is an error if the <code>index</code> position is in the middle of a surrogate pair.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "string" : 
            "name" : "string"
            "qualifiedname" : "dart.core.RuneIterator.RuneIterator.at#string"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.RuneIterator.RuneIterator.at#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "_checkSplitSurrogate" : 
        "name" : "_checkSplitSurrogate"
        "qualifiedname" : "dart.core.RuneIterator._checkSplitSurrogate"
        "comment" : "<p>Throw an error if the index is in the middle of a surrogate pair.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.RuneIterator._checkSplitSurrogate#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "rawIndex" : 
        "name" : "rawIndex"
        "qualifiedname" : "dart.core.RuneIterator.rawIndex"
        "comment" : "<p>Returns the starting position of the current rune in the string.</p> <p>Returns null if the <code>current</code> rune is null.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "rawIndex=" : 
        "name" : "rawIndex="
        "qualifiedname" : "dart.core.RuneIterator.rawIndex="
        "comment" : "<p>Resets the iterator to the rune at the specified index of the string.</p> <p>Setting a negative <code>rawIndex</code>, or one greater than or equal to <code>:string.length:</code>, is an error. So is setting it in the middle of a surrogate pair.</p> <p>Setting the position to the end of then string will set <code>current</code> to null.</p>"
        "type" : "setter"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "rawIndex" : 
            "name" : "rawIndex"
            "qualifiedname" : "dart.core.RuneIterator.rawIndex=#rawIndex"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "reset" : 
        "name" : "reset"
        "qualifiedname" : "dart.core.RuneIterator.reset"
        "comment" : "<p>Resets the iterator to the given index into the string.</p> <p>After this the <code>current</code> value is unset. You must call <code>moveNext</code> make the rune at the position current, or <code>movePrevious</code> for the last rune before the position.</p> <p>Setting a negative <code>rawIndex</code>, or one greater than <code>:string.length:</code>, is an error. So is setting it in the middle of a surrogate pair.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "rawIndex" : 
            "name" : "rawIndex"
            "qualifiedname" : "dart.core.RuneIterator.reset#rawIndex"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "current" : 
        "name" : "current"
        "qualifiedname" : "dart.core.RuneIterator.current"
        "comment" : "<p>The rune (integer Unicode code point) starting at the current position in  the string.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "currentSize" : 
        "name" : "currentSize"
        "qualifiedname" : "dart.core.RuneIterator.currentSize"
        "comment" : "<p>The number of code units comprising the current rune.</p> <p>Returns zero if there is no current rune (<code>current</code> is null).</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "currentAsString" : 
        "name" : "currentAsString"
        "qualifiedname" : "dart.core.RuneIterator.currentAsString"
        "comment" : "<p>A string containing the current rune.</p> <p>For runes outside the basic multilingual plane, this will be a String of length 2, containing two code units.</p> <p>Returns null if <code>current</code> is null.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "moveNext" : 
        "name" : "moveNext"
        "qualifiedname" : "dart.core.RuneIterator.moveNext"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "movePrevious" : 
        "name" : "movePrevious"
        "qualifiedname" : "dart.core.RuneIterator.movePrevious"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "Runes" : 
    "name" : "Runes"
    "qualifiedname" : "dart.core.Runes"
    "comment" : "<p>The runes (integer Unicode code points) of a <code>String</code>.</p>"
    "superclass" : "dart.collection.IterableBase"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "string" : 
        "name" : "string"
        "qualifiedname" : "dart.core.Runes.string"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "Runes" : 
        "name" : "Runes"
        "qualifiedname" : "dart.core.Runes.Runes"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "string" : 
            "name" : "string"
            "qualifiedname" : "dart.core.Runes.Runes#string"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "iterator" : 
        "name" : "iterator"
        "qualifiedname" : "dart.core.Runes.iterator"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.RuneIterator"
        "parameters" : 
      "last" : 
        "name" : "last"
        "qualifiedname" : "dart.core.Runes.last"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
  "String" : 
    "name" : "String"
    "qualifiedname" : "dart.core.String"
    "comment" : "<p>The String class represents sequences of characters. Strings are immutable. A string is represented by a sequence of Unicode UTF-16 code units accessible through the <code>codeUnitAt</code> or the <code>codeUnits</code> members. Their string representation is accessible through the index-operator.</p> <p>The characters of a string are encoded in UTF-16. Decoding UTF-16, which combines surrogate pairs, yields Unicode code points. Following a similar terminology to Go we use the name \"rune\" for an integer representing a Unicode code point. The runes of a string are accessible through the <code>runes</code> getter.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Pattern"
      - "dart.core.Comparable"
    "variables" : 
    "methods" : 
      "String.fromCharCodes" : 
        "name" : "String.fromCharCodes"
        "qualifiedname" : "dart.core.String.String.fromCharCodes"
        "comment" : "<p>Allocates a new String for the specified <code>charCodes</code>.</p> <p>The <code>charCodes</code> can be UTF-16 code units or runes. If a char-code value is 16-bit it is copied verbatim. If it is greater than 16 bits it is decomposed into a surrogate pair.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "charCodes" : 
            "name" : "charCodes"
            "qualifiedname" : "dart.core.String.String.fromCharCodes#charCodes"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "String.fromCharCode" : 
        "name" : "String.fromCharCode"
        "qualifiedname" : "dart.core.String.String.fromCharCode"
        "comment" : "<p>Allocates a new String for the specified <code>charCode</code>.</p> <p>The new string contains a single code unit if the <code>charCode</code> can be represented by a single UTF-16 code unit. Otherwise the <code>length</code> is 2 and the code units form a surrogate pair.</p> <p>It is allowed (though generally discouraged) to create a String with only one half of a surrogate pair.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "charCode" : 
            "name" : "charCode"
            "qualifiedname" : "dart.core.String.String.fromCharCode#charCode"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core.String.[]"
        "comment" : "<p>Gets the character (as a single-code-unit <code>String</code>) at the given <code>index</code>.</p> <p>The returned string represents exactly one UTF-16 code unit which may be half of a surrogate pair. For example the Unicode character for a musical G-clef (\"𝄞\") with rune value 0x1D11E consists of a UTF-16 surrogate pair: <code>0xD834</code> and <code>0xDD1E</code>. Using the index-operator on this string yields a String with half of a surrogate pair:</p> <pre><code>var clef = \"\\u{1D11E}\"; clef.length;  // =&gt; 2 clef.runes.first == 0x1D11E;  // =&gt; true clef.runes.length;  // =&gt; 1 clef.codeUnitAt(0);  // =&gt; 0xD834 clef.codeUnitAt(1);  // =&gt; 0xDD1E // The following strings are halves of a UTF-16 surrogate pair and // thus invalid UTF-16 strings: clef[0];  // =&gt; a string of length 1 with code-unit value 0xD834. clef[1];  // =&gt; a string of length 1 with code-unit value 0xDD1E. </code></pre> <p>This method is equivalent to <code>new String.fromCharCode(this.codeUnitAt(index))</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.String.[]#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "codeUnitAt" : 
        "name" : "codeUnitAt"
        "qualifiedname" : "dart.core.String.codeUnitAt"
        "comment" : "<p>Returns the 16-bit UTF-16 code unit at the given <code>index</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.String.codeUnitAt#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core.String.length"
        "comment" : "<p>The length of the string.</p> <p>Returns the number of UTF-16 code units in this string. The number of <code>runes</code> might be less, if the string contains characters outside the basic multilingual plane (plane 0).</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "==" : 
        "name" : "=="
        "qualifiedname" : "dart.core.String.=="
        "comment" : "<p>Returns whether the two strings are equal.</p> <p>This method compares each individual code unit of the strings. Equivalently (for strings that are well-formed UTF-16) it compares each individual rune (code point).  It does not check for Unicode equivalence. For example the two following strings both represent the string \"Amélie\" but, due to their different encoding will not return equal.</p> <pre><code>\"Am\\xe9lie\" \"Ame\\u{301}lie\" </code></pre> <p>In the first string the \"é\" is encoded as a single unicode code unit (also a single rune), whereas the second string encodes it as \"e\" with the combining accent character \"◌́\".</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.String.==#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "endsWith" : 
        "name" : "endsWith"
        "qualifiedname" : "dart.core.String.endsWith"
        "comment" : "<p>Returns whether this string ends with <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.String.endsWith#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "startsWith" : 
        "name" : "startsWith"
        "qualifiedname" : "dart.core.String.startsWith"
        "comment" : "<p>Returns whether this string starts with a match of <code>pattern</code>.</p> <p>If <code>index</code> is provided, instead check if the substring starting at that index starts with a match of <code>pattern</code>.</p> <p>It is an error if <code>index</code> is negative or greater than <code>length</code>.</p> <p>A <code>RegExp</code> containing \"^\" will not match if the <code>index</code> is greater than zero. The pattern works on the string as a whole, and does not extract a substring starting at <code>index</code> first. That is.</p> <pre><code>\"abc\".startsWith(new RegExp(\"^.\", 1)) == false </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.String.startsWith#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.String.startsWith#index"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "indexOf" : 
        "name" : "indexOf"
        "qualifiedname" : "dart.core.String.indexOf"
        "comment" : "<p>Returns the first position of a match of <code>pattern</code> in this string, starting at <a href=\"inclusive\">start</a>.</p> <p>Returns -1 if a match could not be found.</p> <p>It is an error if start is negative or greater than <code>length</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.String.indexOf#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.String.indexOf#start"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "lastIndexOf" : 
        "name" : "lastIndexOf"
        "qualifiedname" : "dart.core.String.lastIndexOf"
        "comment" : "<p>Returns the last position of a match <code>pattern</code> in this string, searching backward starting at <a href=\"inclusive\">start</a>.</p> <p>Returns -1 if <code>other</code> could not be found.</p> <p>It is an error if start is negative or greater than <code>length</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.String.lastIndexOf#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.String.lastIndexOf#start"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "isEmpty" : 
        "name" : "isEmpty"
        "qualifiedname" : "dart.core.String.isEmpty"
        "comment" : "<p>Returns whether this string is empty.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNotEmpty" : 
        "name" : "isNotEmpty"
        "qualifiedname" : "dart.core.String.isNotEmpty"
        "comment" : "<p>Returns whether this string is not empty.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "+" : 
        "name" : "+"
        "qualifiedname" : "dart.core.String.+"
        "comment" : "<p>Creates a new string by concatenating this string with <code>other</code>.</p> <p>A sequence of strings can be concatenated by using <code>Iterable.join</code>:</p> <pre><code>var strings = ['foo', 'bar', 'geez']; var concatenated = strings.join(); </code></pre>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.String.+#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "substring" : 
        "name" : "substring"
        "qualifiedname" : "dart.core.String.substring"
        "comment" : "<p>Returns a substring of this string in the given range. <code>startIndex</code> is inclusive and <code>endIndex</code> is exclusive.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "startIndex" : 
            "name" : "startIndex"
            "qualifiedname" : "dart.core.String.substring#startIndex"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "endIndex" : 
            "name" : "endIndex"
            "qualifiedname" : "dart.core.String.substring#endIndex"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "trim" : 
        "name" : "trim"
        "qualifiedname" : "dart.core.String.trim"
        "comment" : "<p>Removes leading and trailing whitespace from a string.</p> <p>If the string contains leading or trailing whitespace a new string with no leading and no trailing whitespace is returned. Otherwise, the string itself is returned.</p> <p>Whitespace is defined by the Unicode White_Space property (as defined in version 6.2 or later) and the BOM character, 0xFEFF.</p> <p>Here is the list of trimmed characters (following version 6.2):</p> <pre><code>0009..000D    ; White_Space # Cc   &lt;control-0009&gt;..&lt;control-000D&gt; 0020          ; White_Space # Zs   SPACE 0085          ; White_Space # Cc   &lt;control-0085&gt; 00A0          ; White_Space # Zs   NO-BREAK SPACE 1680          ; White_Space # Zs   OGHAM SPACE MARK 180E          ; White_Space # Zs   MONGOLIAN VOWEL SEPARATOR 2000..200A    ; White_Space # Zs   EN QUAD..HAIR SPACE 2028          ; White_Space # Zl   LINE SEPARATOR 2029          ; White_Space # Zp   PARAGRAPH SEPARATOR 202F          ; White_Space # Zs   NARROW NO-BREAK SPACE 205F          ; White_Space # Zs   MEDIUM MATHEMATICAL SPACE 3000          ; White_Space # Zs   IDEOGRAPHIC SPACE  FEFF          ; BOM                ZERO WIDTH NO_BREAK SPACE </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "contains" : 
        "name" : "contains"
        "qualifiedname" : "dart.core.String.contains"
        "comment" : "<p>Returns whether this string contains a match of <code>other</code>.</p> <p>If <code>startIndex</code> is provided, only matches at or after that index are considered.</p> <p>It is an error if <code>startIndex</code> is negative or greater than <code>length</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.String.contains#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "startIndex" : 
            "name" : "startIndex"
            "qualifiedname" : "dart.core.String.contains#startIndex"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "replaceFirst" : 
        "name" : "replaceFirst"
        "qualifiedname" : "dart.core.String.replaceFirst"
        "comment" : "<p>Returns a new string where the first occurence of <code>from</code> in this string is replaced with <code>to</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "from" : 
            "name" : "from"
            "qualifiedname" : "dart.core.String.replaceFirst#from"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "to" : 
            "name" : "to"
            "qualifiedname" : "dart.core.String.replaceFirst#to"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "replaceAll" : 
        "name" : "replaceAll"
        "qualifiedname" : "dart.core.String.replaceAll"
        "comment" : "<p>Returns a new string where all occurences of <code>from</code> in this string are replaced with <code>replace</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "from" : 
            "name" : "from"
            "qualifiedname" : "dart.core.String.replaceAll#from"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "replace" : 
            "name" : "replace"
            "qualifiedname" : "dart.core.String.replaceAll#replace"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "replaceAllMapped" : 
        "name" : "replaceAllMapped"
        "qualifiedname" : "dart.core.String.replaceAllMapped"
        "comment" : "<p>Returns a new string where all occurences of <code>from</code> in this string are replaced with a <code>String</code> depending on <code>replace</code>.</p> <p>The <code>replace</code> function is called with the <code>Match</code> generated by the pattern, and its result is used as replacement.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "from" : 
            "name" : "from"
            "qualifiedname" : "dart.core.String.replaceAllMapped#from"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "replace" : 
            "name" : "replace"
            "qualifiedname" : "dart.core.String.replaceAllMapped#replace"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "split" : 
        "name" : "split"
        "qualifiedname" : "dart.core.String.split"
        "comment" : "<p>Splits the string around matches of <code>pattern</code>. Returns a list of substrings.</p> <p>Splitting with an empty string pattern (<code>\"\"</code>) splits at UTF-16 code unit boundaries and not at rune boundaries. The following two expressions are hence equivalent:</p> <pre><code>string.split(\"\") string.codeUnits.map((unit) =&gt; new String.fromCharCode(unit)) </code></pre> <p>Unless it guaranteed that the string is in the basic multilingual plane (meaning that each code unit represents a rune) it is often better to map the runes instead:</p> <pre><code>string.runes.map((rune) =&gt; new String.fromCharCode(rune)) </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.String.split#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
      "splitMapJoin" : 
        "name" : "splitMapJoin"
        "qualifiedname" : "dart.core.String.splitMapJoin"
        "comment" : "<p>Splits the string on the <code>pattern</code>, then converts each part and each match.</p> <p>The pattern is used to split the string into parts and separating matches.</p> <p>Each match is converted to a string by calling <code>onMatch</code>. If <code>onMatch</code> is omitted, the matched string is used.</p> <p>Each non-matched part is converted by a call to <code>onNonMatch</code>. If <code>onNonMatch</code> is omitted, the non-matching part is used.</p> <p>Then all the converted parts are combined into the resulting string.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.String.splitMapJoin#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Pattern"
            "value" : "null"
          "onMatch" : 
            "name" : "onMatch"
            "qualifiedname" : "dart.core.String.splitMapJoin#onMatch"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "onNonMatch" : 
            "name" : "onNonMatch"
            "qualifiedname" : "dart.core.String.splitMapJoin#onNonMatch"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "codeUnits" : 
        "name" : "codeUnits"
        "qualifiedname" : "dart.core.String.codeUnits"
        "comment" : "<p>Returns an unmodifiable list of the UTF-16 code units of this string.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
      "runes" : 
        "name" : "runes"
        "qualifiedname" : "dart.core.String.runes"
        "comment" : "<p>Returns an iterable of Unicode code-points of this string.</p> <p>If the string contains surrogate pairs, they will be combined and returned as one integer by this iterator. Unmatched surrogate halves are treated like valid 16-bit code-units.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Runes"
        "parameters" : 
      "toLowerCase" : 
        "name" : "toLowerCase"
        "qualifiedname" : "dart.core.String.toLowerCase"
        "comment" : "<p>If this string is not already all lower case, returns a new string where all characters are made lower case. Returns <code>:this:</code> otherwise.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "toUpperCase" : 
        "name" : "toUpperCase"
        "qualifiedname" : "dart.core.String.toUpperCase"
        "comment" : "<p>If this string is not already all upper case, returns a new string where all characters are made upper case. Returns <code>:this:</code> otherwise.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "Stopwatch" : 
    "name" : "Stopwatch"
    "qualifiedname" : "dart.core.Stopwatch"
    "comment" : "<p>A simple <code>Stopwatch</code> interface to measure elapsed time.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "_start" : 
        "name" : "_start"
        "qualifiedname" : "dart.core.Stopwatch._start"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
      "_stop" : 
        "name" : "_stop"
        "qualifiedname" : "dart.core.Stopwatch._stop"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
    "methods" : 
      "Stopwatch" : 
        "name" : "Stopwatch"
        "qualifiedname" : "dart.core.Stopwatch.Stopwatch"
        "comment" : "<p>Creates a <code>Stopwatch</code> in stopped state with a zero elapsed count.</p> <p>The following example shows how to start a <code>Stopwatch</code> immediately after allocation.</p> <pre><code>Stopwatch stopwatch = new Stopwatch()..start(); </code></pre>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "start" : 
        "name" : "start"
        "qualifiedname" : "dart.core.Stopwatch.start"
        "comment" : "<p>Starts the <code>Stopwatch</code>.</p> <p>The <code>elapsed</code> count is increasing monotonically. If the <code>Stopwatch</code> has been stopped, then calling start again restarts it without resetting the <code>elapsed</code> count.</p> <p>If the <code>Stopwatch</code> is currently running, then calling start does nothing.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "stop" : 
        "name" : "stop"
        "qualifiedname" : "dart.core.Stopwatch.stop"
        "comment" : "<p>Stops the <code>Stopwatch</code>.</p> <p>The <code>elapsedTicks</code> count stops increasing after this call. If the <code>Stopwatch</code> is currently not running, then calling this method has no effect.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "reset" : 
        "name" : "reset"
        "qualifiedname" : "dart.core.Stopwatch.reset"
        "comment" : "<p>Resets the <code>elapsed</code> count to zero.</p> <p>This method does not stop or start the <code>Stopwatch</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "elapsedTicks" : 
        "name" : "elapsedTicks"
        "qualifiedname" : "dart.core.Stopwatch.elapsedTicks"
        "comment" : "<p>Returns the elapsed number of clock ticks since calling <code>start</code> while the <code>Stopwatch</code> is running.</p> <p>Returns the elapsed number of clock ticks between calling <code>start</code> and calling <code>stop</code>.</p> <p>Returns 0 if the <code>Stopwatch</code> has never been started.</p> <p>The elapsed number of clock ticks increases by <code>frequency</code> every second.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "elapsed" : 
        "name" : "elapsed"
        "qualifiedname" : "dart.core.Stopwatch.elapsed"
        "comment" : "<p>Returns the <code>elapsedTicks</code> counter converted to a <code>Duration</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
      "elapsedMicroseconds" : 
        "name" : "elapsedMicroseconds"
        "qualifiedname" : "dart.core.Stopwatch.elapsedMicroseconds"
        "comment" : "<p>Returns the <code>elapsedTicks</code> counter converted to microseconds.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "elapsedMilliseconds" : 
        "name" : "elapsedMilliseconds"
        "qualifiedname" : "dart.core.Stopwatch.elapsedMilliseconds"
        "comment" : "<p>Returns the <code>elapsedTicks</code> counter converted to milliseconds.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "frequency" : 
        "name" : "frequency"
        "qualifiedname" : "dart.core.Stopwatch.frequency"
        "comment" : "<p>Returns the frequency of the elapsed counter in Hz.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "isRunning" : 
        "name" : "isRunning"
        "qualifiedname" : "dart.core.Stopwatch.isRunning"
        "comment" : "<p>Returns wether the <code>StopWatch</code> is currently running.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "_frequency" : 
        "name" : "_frequency"
        "qualifiedname" : "dart.core.Stopwatch._frequency"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
      "_now" : 
        "name" : "_now"
        "qualifiedname" : "dart.core.Stopwatch._now"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
  "StackTrace" : 
    "name" : "StackTrace"
    "qualifiedname" : "dart.core.StackTrace"
    "comment" : "<p>An interface implemented by all stack trace objects.</p> <p>A <code>StackTrace</code> is intended to convey information to the user about the call sequence that triggered an exception.</p> <p>These objects are created by the runtime, it is not possible to create them programmatically.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.StackTrace.toString"
        "comment" : "<p>Returns a <code>String</code> representation of the stack trace.</p> <p>The string represents the full stack trace starting from the point where a throw ocurred to the top of the current call sequence.</p> <p>The exact format of the string representation is not final.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "Set" : 
    "name" : "Set"
    "qualifiedname" : "dart.core.Set"
    "comment" : "<p>A <code>Set</code> is a collection of elements where each element can occur only once.</p> <p>That is, for each object of the element type, the object is either considered to be in the set, or it is not in the set.</p> <p>Set implementations may consider some elements indistinguishable. These objects will be treated as being the same for any operation on the set.</p> <p>The default <code>Set</code> implementation, <code>HashSet</code>, considers objects indistinguishable if they are equal with regard to <code>Object.operator==</code>.</p> <p>Sets may be either ordered or unordered. <code>HashSet</code> is unordered and doesn't guarantee anything about the order that elements are accessed in by iteration. <code>LinkedHashSet</code> iterates in the insertion order of its elements.</p>"
    "superclass" : "dart.collection.IterableBase"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Set" : 
        "name" : "Set"
        "qualifiedname" : "dart.core.Set.Set"
        "comment" : "<p>Creates an empty <code>Set</code>.</p> <p>The created <code>Set</code> is a <code>HashSet</code>. As such, it considers elements that are equal (using <code>==</code>) to be undistinguishable, and requires them to have a compatible <code>Object.hashCode</code> implementation.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
      "Set.from" : 
        "name" : "Set.from"
        "qualifiedname" : "dart.core.Set.Set.from"
        "comment" : "<p>Creates a <code>Set</code> that contains all elements of <code>other</code>.</p> <p>The created <code>Set</code> is a <code>HashSet</code>. As such, it considers elements that are equal (using <code>==</code>) to be undistinguishable, and requires them to have a compatible <code>Object.hashCode</code> implementation.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Set.Set.from#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "contains" : 
        "name" : "contains"
        "qualifiedname" : "dart.core.Set.contains"
        "comment" : "<p>Returns true if <code>value</code> is in the set.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Set.contains#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "add" : 
        "name" : "add"
        "qualifiedname" : "dart.core.Set.add"
        "comment" : "<p>Adds <code>value</code> into the set.</p> <p>The method has no effect if <code>value</code> is already in the set.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Set.add#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Set.E"
            "value" : "null"
      "addAll" : 
        "name" : "addAll"
        "qualifiedname" : "dart.core.Set.addAll"
        "comment" : "<p>Adds all of <code>elements</code> to this Set.</p> <p>Equivalent to adding each element in <code>elements</code> using <code>add</code>, but some collections may be able to optimize it.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "elements" : 
            "name" : "elements"
            "qualifiedname" : "dart.core.Set.addAll#elements"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "remove" : 
        "name" : "remove"
        "qualifiedname" : "dart.core.Set.remove"
        "comment" : "<p>Removes <code>value</code> from the set. Returns true if <code>value</code> was in the set. Returns false otherwise. The method has no effect if <code>value</code> value was not in the set.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Set.remove#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "removeAll" : 
        "name" : "removeAll"
        "qualifiedname" : "dart.core.Set.removeAll"
        "comment" : "<p>Removes each element of <code>elements</code> from this set.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "elements" : 
            "name" : "elements"
            "qualifiedname" : "dart.core.Set.removeAll#elements"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "retainAll" : 
        "name" : "retainAll"
        "qualifiedname" : "dart.core.Set.retainAll"
        "comment" : "<p>Removes all elements of this set that are not elements in <code>elements</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "elements" : 
            "name" : "elements"
            "qualifiedname" : "dart.core.Set.retainAll#elements"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "removeWhere" : 
        "name" : "removeWhere"
        "qualifiedname" : "dart.core.Set.removeWhere"
        "comment" : "<p>Removes all elements of this set that satisfy <code>test</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Set.removeWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "retainWhere" : 
        "name" : "retainWhere"
        "qualifiedname" : "dart.core.Set.retainWhere"
        "comment" : "<p>Removes all elements of this set that fail to satisfy <code>test</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Set.retainWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "containsAll" : 
        "name" : "containsAll"
        "qualifiedname" : "dart.core.Set.containsAll"
        "comment" : "<p>Returns whether this Set contains all the elements of <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Set.containsAll#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "intersection" : 
        "name" : "intersection"
        "qualifiedname" : "dart.core.Set.intersection"
        "comment" : "<p>Returns a new set which is the intersection between this set and <code>other</code>.</p> <p>That is, the returned set contains all the elements of this <code>Set</code> that are also elements of <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Set.intersection#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Set"
            "value" : "null"
      "union" : 
        "name" : "union"
        "qualifiedname" : "dart.core.Set.union"
        "comment" : "<p>Returns a new set which contains all the elements of this set and <code>other</code>.</p> <p>That is, the returned set contains all the elements of this <code>Set</code> and all the elements of <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Set.union#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Set"
            "value" : "null"
      "difference" : 
        "name" : "difference"
        "qualifiedname" : "dart.core.Set.difference"
        "comment" : "<p>Returns a new set with the the elements of this that are not in <code>other</code>.</p> <p>That is, the returned set contains all the elements of this <code>Set</code> that are not elements of <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Set.difference#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Set"
            "value" : "null"
      "clear" : 
        "name" : "clear"
        "qualifiedname" : "dart.core.Set.clear"
        "comment" : "<p>Removes all elements in the set.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
  "RegExp" : 
    "name" : "RegExp"
    "qualifiedname" : "dart.core.RegExp"
    "comment" : "<p><code>RegExp</code> represents regular expressions.</p> <p>Dart regular expressions have the same syntax and semantics as JavaScript regular expressions. See <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.10\">http://ecma-international.org/ecma-262/5.1/#sec-15.10</a> for the specification of JavaScript regular expressions.</p> <p><code>firstMatch</code> is the main implementation method that applies a regular expression to a string and returns the first <code>Match</code>. All other methods in <code>RegExp</code> can build on it.</p> <p>Use <code>allMatches</code> to look for all matches of a regular expression in a string.</p> <p>The following example finds all matches of a regular expression in a string.</p> <pre><code>RegExp exp = new RegExp(r\"(\\w+)\"); String str = \"Parse my string\"; Iterable&lt;Match&gt; matches = exp.allMatches(str); </code></pre>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Pattern"
    "variables" : 
    "methods" : 
      "RegExp" : 
        "name" : "RegExp"
        "qualifiedname" : "dart.core.RegExp.RegExp"
        "comment" : "<p>Constructs a regular expression. The default implementation of a <code>RegExp</code> sets <code>multiLine</code> to false and <code>caseSensitive</code> to true. Throws a <code>FormatException</code> if <code>pattern</code> is not a valid regular exression pattern.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.RegExp"
        "parameters" : 
          "pattern" : 
            "name" : "pattern"
            "qualifiedname" : "dart.core.RegExp.RegExp#pattern"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "multiLine" : 
            "name" : "multiLine"
            "qualifiedname" : "dart.core.RegExp.RegExp#multiLine"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
          "caseSensitive" : 
            "name" : "caseSensitive"
            "qualifiedname" : "dart.core.RegExp.RegExp#caseSensitive"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "true"
      "firstMatch" : 
        "name" : "firstMatch"
        "qualifiedname" : "dart.core.RegExp.firstMatch"
        "comment" : "<p>Searches for the first match of the regular expression in the string <code>str</code>. Returns <code>null</code> if there is no match.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Match"
        "parameters" : 
          "str" : 
            "name" : "str"
            "qualifiedname" : "dart.core.RegExp.firstMatch#str"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "allMatches" : 
        "name" : "allMatches"
        "qualifiedname" : "dart.core.RegExp.allMatches"
        "comment" : "<p>Returns an iterable on the  matches of the regular expression in <code>str</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "str" : 
            "name" : "str"
            "qualifiedname" : "dart.core.RegExp.allMatches#str"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "hasMatch" : 
        "name" : "hasMatch"
        "qualifiedname" : "dart.core.RegExp.hasMatch"
        "comment" : "<p>Returns whether the regular expression has a match in the string <code>str</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "str" : 
            "name" : "str"
            "qualifiedname" : "dart.core.RegExp.hasMatch#str"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "stringMatch" : 
        "name" : "stringMatch"
        "qualifiedname" : "dart.core.RegExp.stringMatch"
        "comment" : "<p>Searches for the first match of the regular expression in the string <code>str</code> and returns the matched string.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "str" : 
            "name" : "str"
            "qualifiedname" : "dart.core.RegExp.stringMatch#str"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "pattern" : 
        "name" : "pattern"
        "qualifiedname" : "dart.core.RegExp.pattern"
        "comment" : "<p>The pattern of this regular expression.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "isMultiLine" : 
        "name" : "isMultiLine"
        "qualifiedname" : "dart.core.RegExp.isMultiLine"
        "comment" : "<p>Whether this regular expression matches multiple lines.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isCaseSensitive" : 
        "name" : "isCaseSensitive"
        "qualifiedname" : "dart.core.RegExp.isCaseSensitive"
        "comment" : "<p>Whether this regular expression is case insensitive.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "Match" : 
    "name" : "Match"
    "qualifiedname" : "dart.core.Match"
    "comment" : "<p><code>Match</code> contains methods to manipulate a regular expression match.</p> <p>Iterables of <code>Match</code> objects are returned from <code>RegExp</code> matching methods.</p> <p>The following example finds all matches of a <code>RegExp</code> in a <code>String</code> and iterates through the returned iterable of <code>Match</code> objects.</p> <pre><code>RegExp exp = new RegExp(r\"(\\w+)\"); String str = \"Parse my string\"; Iterable&lt;Match&gt; matches = exp.allMatches(str); for (Match m in matches) {   String match = m.group(0);   print(match); } </code></pre> <p>The output of the example is:</p> <pre><code>Parse my string </code></pre>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "start" : 
        "name" : "start"
        "qualifiedname" : "dart.core.Match.start"
        "comment" : "<p>Returns the index in the string where the match starts.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "end" : 
        "name" : "end"
        "qualifiedname" : "dart.core.Match.end"
        "comment" : "<p>Returns the index in the string after the last character of the match.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "group" : 
        "name" : "group"
        "qualifiedname" : "dart.core.Match.group"
        "comment" : "<p>Returns the string matched by the given <code>group</code>. If <code>group</code> is 0, returns the match of the regular expression.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "group" : 
            "name" : "group"
            "qualifiedname" : "dart.core.Match.group#group"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core.Match.[]"
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "group" : 
            "name" : "group"
            "qualifiedname" : "dart.core.Match.[]#group"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "groups" : 
        "name" : "groups"
        "qualifiedname" : "dart.core.Match.groups"
        "comment" : "<p>Returns the strings matched by <code>groups</code>. The order in the returned string follows the order in <code>groups</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "groups" : 
            "name" : "groups"
            "qualifiedname" : "dart.core.Match.groups#groups"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
      "groupCount" : 
        "name" : "groupCount"
        "qualifiedname" : "dart.core.Match.groupCount"
        "comment" : "<p>Returns the number of groups in the regular expression.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "str" : 
        "name" : "str"
        "qualifiedname" : "dart.core.Match.str"
        "comment" : "<p>The string on which this matcher was computed.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "pattern" : 
        "name" : "pattern"
        "qualifiedname" : "dart.core.Match.pattern"
        "comment" : "<p>The pattern used to search in <code>str</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Pattern"
        "parameters" : 
  "Pattern" : 
    "name" : "Pattern"
    "qualifiedname" : "dart.core.Pattern"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "allMatches" : 
        "name" : "allMatches"
        "qualifiedname" : "dart.core.Pattern.allMatches"
        "comment" : "<p>Match this pattern against the string repeatedly.</p> <p>The iterable will contain all the non-overlapping matches of the pattern on the string, ordered by start index.</p> <p>The matches are found by repeatedly finding the first match of the pattern on the string, starting from the end of the previous match, and initially starting from index zero.</p> <p>If the pattern matches the empty string at some point, the next match is found by starting at the previous match's end plus one.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "str" : 
            "name" : "str"
            "qualifiedname" : "dart.core.Pattern.allMatches#str"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "matchAsPrefix" : 
        "name" : "matchAsPrefix"
        "qualifiedname" : "dart.core.Pattern.matchAsPrefix"
        "comment" : "<p>Match this pattern against the start of string.</p> <p>If <code>start</code> is provided, it must be an integer in the range <code>0</code> .. <code>string.length</code>. In that case, this patten is tested against the string at the <code>start</code> position. That is, a match is returned if the pattern can match a part of the string starting from position <code>start</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Match"
        "parameters" : 
          "string" : 
            "name" : "string"
            "qualifiedname" : "dart.core.Pattern.matchAsPrefix#string"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.Pattern.matchAsPrefix#start"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
  "Object" : 
    "name" : "Object"
    "qualifiedname" : "dart.core.Object"
    "comment" : "<p>Everything in Dart is an <code>Object</code>.</p>"
    "superclass" : ""
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Object" : 
        "name" : "Object"
        "qualifiedname" : "dart.core.Object.Object"
        "comment" : "<p>Creates a new <code>Object</code> instance.</p> <p><code>Object</code> instances have no meaningful state, and are only useful through their identity. An <code>Object</code> instance is equal to itself only.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "==" : 
        "name" : "=="
        "qualifiedname" : "dart.core.Object.=="
        "comment" : "<p>The equality operator.</p> <p>The default behavior for all <code>Object</code>s is to return true if and only if <code>:this:</code> and <code>other</code> are the same object.</p> <p>If a subclass overrides the equality operator it should override the <code>hashCode</code> method as well to maintain consistency.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Object.==#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "hashCode" : 
        "name" : "hashCode"
        "qualifiedname" : "dart.core.Object.hashCode"
        "comment" : "<p>Get a hash code for this object.</p> <p>All objects have hash codes. Hash codes are guaranteed to be the same for objects that are equal when compared using the equality operator <code>:==:</code>. Other than that there are no guarantees about the hash codes. They will not be consistent between runs and there are no distribution guarantees.</p> <p>If a subclass overrides <code>hashCode</code> it should override the equality operator as well to maintain consistency.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.Object.toString"
        "comment" : "<p>Returns a string representation of this object.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "noSuchMethod" : 
        "name" : "noSuchMethod"
        "qualifiedname" : "dart.core.Object.noSuchMethod"
        "comment" : "<p><code>noSuchMethod</code> is invoked when users invoke a non-existant method on an object. The name of the method and the arguments of the invocation are passed to <code>noSuchMethod</code> in an <code>Invocation</code>. If <code>noSuchMethod</code> returns a value, that value becomes the result of the original invocation.</p> <p>The default behavior of <code>noSuchMethod</code> is to throw a <code>noSuchMethodError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "invocation" : 
            "name" : "invocation"
            "qualifiedname" : "dart.core.Object.noSuchMethod#invocation"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Invocation"
            "value" : "null"
      "runtimeType" : 
        "name" : "runtimeType"
        "qualifiedname" : "dart.core.Object.runtimeType"
        "comment" : "<p>A representation of the runtime type of the object.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Type"
        "parameters" : 
  "num" : 
    "name" : "num"
    "qualifiedname" : "dart.core.num"
    "comment" : "<p>All numbers in dart are instances of <code>num</code>.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Comparable"
    "variables" : 
    "methods" : 
      "+" : 
        "name" : "+"
        "qualifiedname" : "dart.core.num.+"
        "comment" : "<p>Addition operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.+#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "-" : 
        "name" : "-"
        "qualifiedname" : "dart.core.num.-"
        "comment" : "<p>Subtraction operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.-#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "*" : 
        "name" : "*"
        "qualifiedname" : "dart.core.num.*"
        "comment" : "<p>Multiplication operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.*#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "%" : 
        "name" : "%"
        "qualifiedname" : "dart.core.num.%"
        "comment" : "<p>Euclidean modulo operator.</p> <p>Returns the remainder of the euclidean division. The euclidean division of two integers <code>a</code> and <code>b</code> yields two integers <code>q</code> and <code>r</code> such that <code>a == b*q + r</code> and <code>0 &lt;= r &lt; a.abs()</code>.</p> <p>The euclidean division is only defined for integers, but can be easily extended to work with doubles. In that case <code>r</code> may have a non-integer value, but it still verifies <code>0 &lt;= r &lt; |a|</code>.</p> <p>The sign of the returned value <code>r</code> is always positive.</p> <p>See <code>remainder</code> for the remainder of the truncating division.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.%#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "/" : 
        "name" : "/"
        "qualifiedname" : "dart.core.num./"
        "comment" : "<p>Division operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num./#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "~/" : 
        "name" : "~/"
        "qualifiedname" : "dart.core.num.~/"
        "comment" : "<p>Truncating division operator.</p> <p>If either operand is a <code>double</code> then the result of the truncating division <code>:a ~/ b:</code> is equivalent to <code>:(a / b).truncate().toInt():</code>.</p> <p>If both operands are <code>int</code>s then <code>:a ~/ b:</code> performs the truncating integer division.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.~/#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "unary-" : 
        "name" : "unary-"
        "qualifiedname" : "dart.core.num.unary-"
        "comment" : "<p>Negate operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
      "remainder" : 
        "name" : "remainder"
        "qualifiedname" : "dart.core.num.remainder"
        "comment" : "<p>Returns the remainder of the truncating division of <code>this</code> by <code>other</code>.</p> <p>The result <code>r</code> of this operation satisfies: <code>this == this ~/ other + r</code>. As a consequence the remainder <code>r</code> has the same sign as the dividend <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.remainder#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "<" : 
        "name" : "<"
        "qualifiedname" : "dart.core.num.<"
        "comment" : "<p>Relational less than operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.<#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "<=" : 
        "name" : "<="
        "qualifiedname" : "dart.core.num.<="
        "comment" : "<p>Relational less than or equal operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.<=#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      ">" : 
        "name" : ">"
        "qualifiedname" : "dart.core.num.>"
        "comment" : "<p>Relational greater than operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.>#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      ">=" : 
        "name" : ">="
        "qualifiedname" : "dart.core.num.>="
        "comment" : "<p>Relational greater than or equal operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.num.>=#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "isNaN" : 
        "name" : "isNaN"
        "qualifiedname" : "dart.core.num.isNaN"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNegative" : 
        "name" : "isNegative"
        "qualifiedname" : "dart.core.num.isNegative"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isInfinite" : 
        "name" : "isInfinite"
        "qualifiedname" : "dart.core.num.isInfinite"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "abs" : 
        "name" : "abs"
        "qualifiedname" : "dart.core.num.abs"
        "comment" : "<p>Returns the absolute value of this <code>num</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
      "round" : 
        "name" : "round"
        "qualifiedname" : "dart.core.num.round"
        "comment" : "<p>Returns the integer closest to <code>this</code>.</p> <p>Rounds away from zero when there is no closest integer:  <code>:(3.5).round() == 4:</code> and <code>:(-3.5).round() == -4:</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "floor" : 
        "name" : "floor"
        "qualifiedname" : "dart.core.num.floor"
        "comment" : "<p>Returns the greatest integer no greater than <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "ceil" : 
        "name" : "ceil"
        "qualifiedname" : "dart.core.num.ceil"
        "comment" : "<p>Returns the least integer no smaller than <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "truncate" : 
        "name" : "truncate"
        "qualifiedname" : "dart.core.num.truncate"
        "comment" : "<p>Returns the integer obtained by discarding any fractional digits from <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "roundToDouble" : 
        "name" : "roundToDouble"
        "qualifiedname" : "dart.core.num.roundToDouble"
        "comment" : "<p>Returns the integer value closest to <code>this</code>.</p> <p>Rounds away from zero when there is no closest integer:  <code>:(3.5).round() == 4:</code> and <code>:(-3.5).round() == -4:</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "floorToDouble" : 
        "name" : "floorToDouble"
        "qualifiedname" : "dart.core.num.floorToDouble"
        "comment" : "<p>Returns the greatest integer value no greater than <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "ceilToDouble" : 
        "name" : "ceilToDouble"
        "qualifiedname" : "dart.core.num.ceilToDouble"
        "comment" : "<p>Returns the least integer value no smaller than <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "truncateToDouble" : 
        "name" : "truncateToDouble"
        "qualifiedname" : "dart.core.num.truncateToDouble"
        "comment" : "<p>Returns the integer obtained by discarding any fractional digits from <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "clamp" : 
        "name" : "clamp"
        "qualifiedname" : "dart.core.num.clamp"
        "comment" : "<p>Clamps <code>this</code> to be in the range <code>lowerLimit</code>-<code>upperLimit</code>. The comparison is done using <code>compareTo</code> and therefore takes <code>:-0.0:</code> into account. It also implies that <code>double.NAN</code> is treated as the maximal double value.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.num"
        "parameters" : 
          "lowerLimit" : 
            "name" : "lowerLimit"
            "qualifiedname" : "dart.core.num.clamp#lowerLimit"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
          "upperLimit" : 
            "name" : "upperLimit"
            "qualifiedname" : "dart.core.num.clamp#upperLimit"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "toInt" : 
        "name" : "toInt"
        "qualifiedname" : "dart.core.num.toInt"
        "comment" : "<p>Truncates this <code>num</code> to an integer and returns the result as an <code>int</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "toDouble" : 
        "name" : "toDouble"
        "qualifiedname" : "dart.core.num.toDouble"
        "comment" : "<p>Return this <code>num</code> as a <code>double</code>.</p> <p>If the number is not representable as a <code>double</code>, an approximation is returned. For numerically large integers, the approximation may be infinite.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "toStringAsFixed" : 
        "name" : "toStringAsFixed"
        "qualifiedname" : "dart.core.num.toStringAsFixed"
        "comment" : "<p>Converts <code>this</code> to a <code>double</code> and returns its string representation with <code>fractionDigits</code> digits after the decimal point.</p> <p>The parameter <code>fractionDigits</code> must be an integer satisfying: [:0 <= fractionDigits <= 20:].</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "fractionDigits" : 
            "name" : "fractionDigits"
            "qualifiedname" : "dart.core.num.toStringAsFixed#fractionDigits"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "toStringAsExponential" : 
        "name" : "toStringAsExponential"
        "qualifiedname" : "dart.core.num.toStringAsExponential"
        "comment" : "<p>Converts <code>this</code> to a <code>double</code> and returns its string representation in decimal exponential notation with <code>fractionDigits</code> digits after the decimal point.</p> <p>If <code>fractionDigits</code> is given then it must be an integer satisfying: [:0 <= fractionDigits <= 20:]. Without the parameter the returned string uses the shortest number of digits that accurately represent <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "fractionDigits" : 
            "name" : "fractionDigits"
            "qualifiedname" : "dart.core.num.toStringAsExponential#fractionDigits"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "toStringAsPrecision" : 
        "name" : "toStringAsPrecision"
        "qualifiedname" : "dart.core.num.toStringAsPrecision"
        "comment" : "<p>Converts <code>this</code> to a double and returns its string representation with <code>precision</code> significant digits.</p> <p>The parameter <code>precision</code> must be an integer satisfying: [:1 <= precision <= 21:].</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "precision" : 
            "name" : "precision"
            "qualifiedname" : "dart.core.num.toStringAsPrecision#precision"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.num.toString"
        "comment" : "<p>Computes the shortest string of digits that correctly represent the input number.</p> <p><code>double</code>s in the range <code>10^-6</code> (inclusive) to <code>10^21</code> (exclusive) are converted to their decimal representation with at least one digit after the decimal point. For all other doubles, except for special values like <code>NaN</code> or <code>Infinity</code>, this method returns an exponential representation (see <code>toStringAsExponential</code>).</p> <p>Returns <code>\"NaN\"</code> for <code>double.NAN</code>, <code>\"Infinity\"</code> for <code>double.INFINITY</code>, and <code>\"-Infinity\"</code> for <code>double.MINUS_INFINITY</code>.</p> <p><code>int</code>s are always converted to their decimal representation.</p> <p>Examples:</p> <pre><code>(0.000001).toString(); // \"0.000001\" (0.0000001).toString(); // \"1e-7\" (111111111111111111111.0).toString(); // \"111111111111111110000.0\" (100000000000000000000.0).toString(); // \"100000000000000000000.0\" (1000000000000000000000.0).toString(); // \"1e+21\" (1111111111111111111111.0).toString(); // \"1.1111111111111111e+21\" 1.toString(); // \"1\" 111111111111111111111.toString(); // \"111111111111111110000\" 100000000000000000000.toString(); // \"100000000000000000000\" 1000000000000000000000.toString(); // \"1000000000000000000000\" 1111111111111111111111.toString(); // \"1111111111111111111111\" </code></pre> <p>Note: the conversion may round the output if the returned string is accurate enough to uniquely identify the input-number. For example the most precise representation of the <code>double</code> <code>9e59</code> equals <code>\"899999999999999918767229449717619953810131273674690656206848\"</code>, but this method returns the shorter (but still correct) <code>\"9e59\"</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "Map" : 
    "name" : "Map"
    "qualifiedname" : "dart.core.Map"
    "comment" : "<p>A <code>Map</code> is an associative container, mapping a key to a value. Null values are supported, but null keys are not.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Map" : 
        "name" : "Map"
        "qualifiedname" : "dart.core.Map.Map"
        "comment" : "<p>Creates a map with the default implementation.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
      "Map.from" : 
        "name" : "Map.from"
        "qualifiedname" : "dart.core.Map.Map.from"
        "comment" : "<p>Creates a <code>Map</code> that contains all key value pairs of <code>other</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Map.Map.from#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "Map.fromIterable" : 
        "name" : "Map.fromIterable"
        "qualifiedname" : "dart.core.Map.Map.fromIterable"
        "comment" : "<p>Creates a <code>Map</code> where the keys and values are computed from the <code>iterable</code>.</p> <p>For each element of the <code>iterable</code> this constructor computes a key/value pair, by applying <code>key</code> and <code>value</code> respectively.</p> <p>The keys of the key/value pairs do not need to be unique. The last occurrence of a key will simply overwrite any previous value.</p> <p>If no values are specified for <code>key</code> and <code>value</code> the default is the identity function.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.Map.Map.fromIterable#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.Map.fromIterable#key"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Map.Map.fromIterable#value"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "Map.fromIterables" : 
        "name" : "Map.fromIterables"
        "qualifiedname" : "dart.core.Map.Map.fromIterables"
        "comment" : "<p>Creates a <code>Map</code> associating the given <code>keys</code> to <code>values</code>.</p> <p>This constructor iterates over <code>keys</code> and <code>values</code> and maps each element of <code>keys</code> to the corresponding element of <code>values</code>.</p> <p>If <code>keys</code> contains the same object multiple times, the last occurrence overwrites the previous value.</p> <p>It is an error if the two <code>Iterable</code>s don't have the same length.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
          "keys" : 
            "name" : "keys"
            "qualifiedname" : "dart.core.Map.Map.fromIterables#keys"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "values" : 
            "name" : "values"
            "qualifiedname" : "dart.core.Map.Map.fromIterables#values"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "containsValue" : 
        "name" : "containsValue"
        "qualifiedname" : "dart.core.Map.containsValue"
        "comment" : "<p>Returns whether this map contains the given <code>value</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Map.containsValue#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "containsKey" : 
        "name" : "containsKey"
        "qualifiedname" : "dart.core.Map.containsKey"
        "comment" : "<p>Returns whether this map contains the given <code>key</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.containsKey#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core.Map.[]"
        "comment" : "<p>Returns the value for the given <code>key</code> or null if <code>key</code> is not in the map. Because null values are supported, one should either use containsKey to distinguish between an absent key and a null value, or use the <code>putIfAbsent</code> method.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Map.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.[]#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "[]=" : 
        "name" : "[]="
        "qualifiedname" : "dart.core.Map.[]="
        "comment" : "<p>Associates the <code>key</code> with the given <code>value</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.[]=#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map.K"
            "value" : "null"
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Map.[]=#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map.V"
            "value" : "null"
      "putIfAbsent" : 
        "name" : "putIfAbsent"
        "qualifiedname" : "dart.core.Map.putIfAbsent"
        "comment" : "<p>If <code>key</code> is not associated to a value, calls <code>ifAbsent</code> and updates the map by mapping <code>key</code> to the value returned by <code>ifAbsent</code>. Returns the value in the map.</p> <p>It is an error to add or remove keys from map during the call to <code>ifAbsent</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Map.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.putIfAbsent#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map.K"
            "value" : "null"
          "ifAbsent" : 
            "name" : "ifAbsent"
            "qualifiedname" : "dart.core.Map.putIfAbsent#ifAbsent"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "addAll" : 
        "name" : "addAll"
        "qualifiedname" : "dart.core.Map.addAll"
        "comment" : "<p>Adds all key-value pairs of <code>other</code> to this map.</p> <p>If a key of <code>other</code> is already in this map, its value is overwritten.</p> <p>The operation is equivalent to doing <code>this[key] = value</code> for each key and associated value in other. It iterates over <code>other</code>, which must therefore not change during the iteration.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Map.addAll#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
      "remove" : 
        "name" : "remove"
        "qualifiedname" : "dart.core.Map.remove"
        "comment" : "<p>Removes the association for the given <code>key</code>. Returns the value for <code>key</code> in the map or null if <code>key</code> is not in the map. Note that values can be null and a returned null value does not always imply that the key is absent.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Map.V"
        "parameters" : 
          "key" : 
            "name" : "key"
            "qualifiedname" : "dart.core.Map.remove#key"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "clear" : 
        "name" : "clear"
        "qualifiedname" : "dart.core.Map.clear"
        "comment" : "<p>Removes all pairs from the map.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "forEach" : 
        "name" : "forEach"
        "qualifiedname" : "dart.core.Map.forEach"
        "comment" : "<p>Applies <code>f</code> to each {key, value} pair of the map.</p> <p>It is an error to add or remove keys from the map during iteration.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "f" : 
            "name" : "f"
            "qualifiedname" : "dart.core.Map.forEach#f"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "keys" : 
        "name" : "keys"
        "qualifiedname" : "dart.core.Map.keys"
        "comment" : "<p>The keys of <code>this</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
      "values" : 
        "name" : "values"
        "qualifiedname" : "dart.core.Map.values"
        "comment" : "<p>The values of <code>this</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core.Map.length"
        "comment" : "<p>The number of {key, value} pairs in the map.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "isEmpty" : 
        "name" : "isEmpty"
        "qualifiedname" : "dart.core.Map.isEmpty"
        "comment" : "<p>Returns true if there is no {key, value} pair in the map.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNotEmpty" : 
        "name" : "isNotEmpty"
        "qualifiedname" : "dart.core.Map.isNotEmpty"
        "comment" : "<p>Returns true if there is at least one {key, value} pair in the map.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "List" : 
    "name" : "List"
    "qualifiedname" : "dart.core.List"
    "comment" : "<p>A <code>List</code> is an indexable collection with a length.</p> <p>A <code>List</code> implementation can choose not to support all methods of the <code>List</code> interface.</p> <p>The most common list types are: <em> Fixed length list. It is an error to use operations that can change   the list's length. </em> Growable list. Full implementation of the interface. * Unmodifiable list. It is an error to use operations that can change   the list's length, or that can change the values of the list.   If an unmodifable list is backed by another modifiable data structure,   the values read from it may still change over time.</p> <p>Example:</p> <pre><code>var fixedLengthList = new List(5); fixedLengthList.length = 0;  // throws. fixedLengthList.add(499);  // throws fixedLengthList[0] = 87; var growableList = [1, 2]; growableList.length = 0; growableList.add(499); growableList[0] = 87; var unmodifiableList = const [1, 2]; unmodifiableList.length = 0;  // throws. unmodifiableList.add(499);  // throws unmodifiableList[0] = 87;  // throws. </code></pre> <p>Lists are <code>Iterable</code>. List iteration iterates over values in index order. Changing the values will not affect iteration, but changing the valid indices - that is, changing the list's length - between iteration steps will cause a <code>ConcurrentModificationError</code>. This means that only growable lists can throw <code>ConcurrentModificationError</code>. If the length changes temporarily and is restored before continuing the iteration, the iterator will not detect it.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Iterable"
    "variables" : 
    "methods" : 
      "List" : 
        "name" : "List"
        "qualifiedname" : "dart.core.List.List"
        "comment" : "<p>Creates a list of the given <code>length</code>.</p> <p>The list is a fixed-length list if <code>length</code> is provided, and an empty growable list if <code>length</code> is omitted.</p> <p>It is an error if <code>length</code> is not a non-negative integer.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "length" : 
            "name" : "length"
            "qualifiedname" : "dart.core.List.List#length"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "List.filled" : 
        "name" : "List.filled"
        "qualifiedname" : "dart.core.List.List.filled"
        "comment" : "<p>Creates a fixed-length list of the given <code>length</code> where each entry contains <code>fill</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "length" : 
            "name" : "length"
            "qualifiedname" : "dart.core.List.List.filled#length"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "fill" : 
            "name" : "fill"
            "qualifiedname" : "dart.core.List.List.filled#fill"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
      "List.from" : 
        "name" : "List.from"
        "qualifiedname" : "dart.core.List.List.from"
        "comment" : "<p>Creates an list with the elements of <code>other</code>.</p> <p>The order in the list will be the order provided by the iterator of <code>other</code>.</p> <p>The returned list is growable if <code>growable</code> is true, otherwise it's a fixed length list.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.List.List.from#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "growable" : 
            "name" : "growable"
            "qualifiedname" : "dart.core.List.List.from#growable"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "true"
      "List.generate" : 
        "name" : "List.generate"
        "qualifiedname" : "dart.core.List.List.generate"
        "comment" : "<p>Generate a <code>List</code> of values.</p> <p>Creates a list with <code>length</code> positions and fills them by values created by calling <code>generator</code> for each index in the range <code>0</code> .. <code>[length] - 1</code> in increasing order.</p> <p>The created list's length is fixed unless <code>growable</code> is true.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "length" : 
            "name" : "length"
            "qualifiedname" : "dart.core.List.List.generate#length"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "generator" : 
            "name" : "generator"
            "qualifiedname" : "dart.core.List.List.generate#generator"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "growable" : 
            "name" : "growable"
            "qualifiedname" : "dart.core.List.List.generate#growable"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "true"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core.List.[]"
        "comment" : "<p>Returns the element at the given <code>index</code> in the list or throws an <code>RangeError</code> if <code>index</code> is out of bounds.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.List.E"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.[]#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "[]=" : 
        "name" : "[]="
        "qualifiedname" : "dart.core.List.[]="
        "comment" : "<p>Sets the entry at the given <code>index</code> in the list to <code>value</code>.</p> <p>Throws an <code>RangeError</code> if <code>index</code> is out of bounds.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.[]=#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.List.[]=#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core.List.length"
        "comment" : "<p>Returns the number of elements in the list.</p> <p>The valid indices for a list are 0 through <code>length - 1</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "length=" : 
        "name" : "length="
        "qualifiedname" : "dart.core.List.length="
        "comment" : "<p>Changes the length of the list. If <code>newLength</code> is greater than the current <code>length</code>, entries are initialized to <code>:null:</code>.</p> <p>Throws an <code>UnsupportedError</code> if the list is not extendable.</p>"
        "type" : "setter"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "newLength" : 
            "name" : "newLength"
            "qualifiedname" : "dart.core.List.length=#newLength"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "add" : 
        "name" : "add"
        "qualifiedname" : "dart.core.List.add"
        "comment" : "<p>Adds <code>value</code> at the end of the list, extending the length by one.</p> <p>Throws an <code>UnsupportedError</code> if the list is not extendable.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.List.add#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
      "addAll" : 
        "name" : "addAll"
        "qualifiedname" : "dart.core.List.addAll"
        "comment" : "<p>Appends all elements of the <code>iterable</code> to the end of this list.</p> <p>Extends the length of the list by the number of elements in <code>iterable</code>. Throws an <code>UnsupportedError</code> if this list is not extensible.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.List.addAll#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "reversed" : 
        "name" : "reversed"
        "qualifiedname" : "dart.core.List.reversed"
        "comment" : "<p>Returns an <code>Iterable</code> of the elements of this <code>List</code> in reverse order.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
      "sort" : 
        "name" : "sort"
        "qualifiedname" : "dart.core.List.sort"
        "comment" : "<p>Sorts the list according to the order specified by the <code>compare</code> function.</p> <p>The <code>compare</code> function must act as a <code>Comparator</code>.</p> <p>The default <code>List</code> implementations use <code>Comparable.compare</code> if <code>compare</code> is omitted.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "compare" : 
            "name" : "compare"
            "qualifiedname" : "dart.core.List.sort#compare"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "indexOf" : 
        "name" : "indexOf"
        "qualifiedname" : "dart.core.List.indexOf"
        "comment" : "<p>Returns the first index of <code>element</code> in the list.</p> <p>Searches the list from index <code>start</code> to the length of the list. The first time an element <code>:e:</code> is encountered so that <code>:e == element:</code>, the index of <code>:e:</code> is returned. Returns -1 if <code>element</code> is not found.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "element" : 
            "name" : "element"
            "qualifiedname" : "dart.core.List.indexOf#element"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.indexOf#start"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "lastIndexOf" : 
        "name" : "lastIndexOf"
        "qualifiedname" : "dart.core.List.lastIndexOf"
        "comment" : "<p>Returns the last index of <code>element</code> in the list.</p> <p>Searches the list backwards from index <a href=\"inclusive\">start</a> to 0.</p> <p>The first time an element <code>:e:</code> is encountered so that <code>:e == element:</code>, the index of <code>:e:</code> is returned.</p> <p>If start is not provided, it defaults to <code>:this.length - 1:</code>.</p> <p>Returns -1 if <code>element</code> is not found.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "element" : 
            "name" : "element"
            "qualifiedname" : "dart.core.List.lastIndexOf#element"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.lastIndexOf#start"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "clear" : 
        "name" : "clear"
        "qualifiedname" : "dart.core.List.clear"
        "comment" : "<p>Removes all elements in the list.</p> <p>The length of the list becomes zero.</p> <p>Throws an <code>UnsupportedError</code>, and retains all elements, if the length of the list cannot be changed.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
      "insert" : 
        "name" : "insert"
        "qualifiedname" : "dart.core.List.insert"
        "comment" : "<p>Inserts the element at position <code>index</code> in the list.</p> <p>This increases the length of the list by one and shifts all elements at or after the index towards the end of the list.</p> <p>It is an error if the <code>index</code> does not point inside the list or at the position after the last element.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.insert#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "element" : 
            "name" : "element"
            "qualifiedname" : "dart.core.List.insert#element"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
      "insertAll" : 
        "name" : "insertAll"
        "qualifiedname" : "dart.core.List.insertAll"
        "comment" : "<p>Inserts all elements of <code>iterable</code> at position <code>index</code> in the list.</p> <p>This increases the length of the list by the length of <code>iterable</code> and shifts all later elements towards the end of the list.</p> <p>It is an error if the <code>index</code> does not point inside the list or at the position after the last element.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.insertAll#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.List.insertAll#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "setAll" : 
        "name" : "setAll"
        "qualifiedname" : "dart.core.List.setAll"
        "comment" : "<p>Overwrites elements of <code>this</code> with the elemenst of <code>iterable</code> starting at position <code>index</code> in the list.</p> <p>This operation does not increase the length of <code>this</code>.</p> <p>It is an error if the <code>index</code> does not point inside the list or at the position after the last element.</p> <p>It is an error if the <code>iterable</code> is longer than <code>length</code> - <code>index</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.setAll#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.List.setAll#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "remove" : 
        "name" : "remove"
        "qualifiedname" : "dart.core.List.remove"
        "comment" : "<p>Removes <code>value</code> from the list. Returns true if <code>value</code> was in the list. Returns false otherwise. The method has no effect if <code>value</code> value was not in the list.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.List.remove#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "removeAt" : 
        "name" : "removeAt"
        "qualifiedname" : "dart.core.List.removeAt"
        "comment" : "<p>Removes the element at position <code>index</code> from the list.</p> <p>This reduces the length of <code>this</code> by one and moves all later elements down by one position.</p> <p>Returns the removed element.</p> <p>Throws an <code>ArgumentError</code> if <code>index</code> is not an <code>int</code>.</p> <p>Throws an <code>RangeError</code> if the <code>index</code> does not point inside the list.</p> <p>Throws an <code>UnsupportedError</code>, and doesn't remove the element, if the length of <code>this</code> cannot be changed.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List.E"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.List.removeAt#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "removeLast" : 
        "name" : "removeLast"
        "qualifiedname" : "dart.core.List.removeLast"
        "comment" : "<p>Pops and returns the last element of the list. Throws a <code>UnsupportedError</code> if the length of the list cannot be changed.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List.E"
        "parameters" : 
      "removeWhere" : 
        "name" : "removeWhere"
        "qualifiedname" : "dart.core.List.removeWhere"
        "comment" : "<p>Removes all elements of this list that satisfy <code>test</code>.</p> <p>An elements <code>:e:</code> satisfies <code>test</code> if <code>:test(e):</code> is true.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.List.removeWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "retainWhere" : 
        "name" : "retainWhere"
        "qualifiedname" : "dart.core.List.retainWhere"
        "comment" : "<p>Removes all elements of this list that fail to satisfy <code>test</code>.</p> <p>An elements <code>:e:</code> satisfies <code>test</code> if <code>:test(e):</code> is true.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.List.retainWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "sublist" : 
        "name" : "sublist"
        "qualifiedname" : "dart.core.List.sublist"
        "comment" : "<p>Returns a new list containing the elements from <code>start</code> to <code>end</code>.</p> <p>If <code>end</code> is omitted, the <code>length</code> of <code>this</code> is used.</p> <p>It is an error if <code>start</code> or <code>end</code> are not indices into <code>this</code>, or if <code>end</code> is before <code>start</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.sublist#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.sublist#end"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "getRange" : 
        "name" : "getRange"
        "qualifiedname" : "dart.core.List.getRange"
        "comment" : "<p>Returns an <code>Iterable</code> that iterates over the elements in the range <code>start</code> to <code>end</code> exclusive. The result of this function is backed by <code>this</code>.</p> <p>It is an error if <code>end</code> is before <code>start</code>.</p> <p>It is an error if the <code>start</code> and <code>end</code> are not valid ranges at the time of the call to this method. The returned <code>Iterable</code> behaves similar to <code>skip(start).take(end - start)</code>. That is, it will not throw exceptions if <code>this</code> changes size.</p> <p>Example:</p> <pre><code>var list = [1, 2, 3, 4, 5]; var range = list.getRange(1, 4); print(range.join(', '));  // =&gt; 2, 3, 4 list.length = 3; print(range.join(', '));  // =&gt; 2, 3 </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.getRange#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.getRange#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "setRange" : 
        "name" : "setRange"
        "qualifiedname" : "dart.core.List.setRange"
        "comment" : "<p>Copies the elements of <code>iterable</code>, skipping the <code>skipCount</code> first elements, into the range <code>start</code> to <code>end</code> exclusive of <code>this</code>.</p> <p>If <code>start</code> equals <code>end</code> and <code>start</code>..<code>end</code> represents a legal range, this method has no effect.</p> <p>It is an error if <code>start</code>..<code>end</code> is not a valid range pointing into the <code>this</code>.</p> <p>It is an error if the <code>iterable</code> does not have enough elements after skipping <code>skipCount</code> elements.</p> <p>Example:</p> <pre><code>var list = [1, 2, 3, 4]; var list2 = [5, 6, 7, 8, 9]; list.setRange(1, 3, list2, 3); print(list);  // =&gt; [1, 8, 9, 4] </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.setRange#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.setRange#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.List.setRange#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
          "skipCount" : 
            "name" : "skipCount"
            "qualifiedname" : "dart.core.List.setRange#skipCount"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "removeRange" : 
        "name" : "removeRange"
        "qualifiedname" : "dart.core.List.removeRange"
        "comment" : "<p>Removes the elements in the range <code>start</code> to <code>end</code> exclusive.</p> <p>It is an error if <code>start</code>..<code>end</code> is not a valid range pointing into the <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.removeRange#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.removeRange#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "fillRange" : 
        "name" : "fillRange"
        "qualifiedname" : "dart.core.List.fillRange"
        "comment" : "<p>Sets the elements in the range <code>start</code> to <code>end</code> exclusive to the given <code>fillValue</code>.</p> <p>It is an error if <code>start</code>..<code>end</code> is not a valid range pointing into the <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.fillRange#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.fillRange#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "fillValue" : 
            "name" : "fillValue"
            "qualifiedname" : "dart.core.List.fillRange#fillValue"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List.E"
            "value" : "null"
      "replaceRange" : 
        "name" : "replaceRange"
        "qualifiedname" : "dart.core.List.replaceRange"
        "comment" : "<p>Removes the elements in the range <code>start</code> to <code>end</code> exclusive and replaces them with the contents of the <code>iterable</code>.</p> <p>It is an error if <code>start</code>..<code>end</code> is not a valid range pointing into the <code>this</code>.</p> <p>Example:</p> <pre><code>var list = [1, 2, 3, 4, 5]; list.replaceRange(1, 3, [6, 7, 8, 9]); print(list);  // [1, 6, 7, 8, 9, 4, 5] </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.List.replaceRange#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.List.replaceRange#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "iterable" : 
            "name" : "iterable"
            "qualifiedname" : "dart.core.List.replaceRange#iterable"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Iterable"
            "value" : "null"
      "asMap" : 
        "name" : "asMap"
        "qualifiedname" : "dart.core.List.asMap"
        "comment" : "<p>Returns an unmodifiable <code>Map</code> view of <code>this</code>.</p> <p>It has the indices of this list as keys, and the corresponding elements as values. The [Map.keys] [Iterable] will iterate the indices of this list in numerical order.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
  "Iterator" : 
    "name" : "Iterator"
    "qualifiedname" : "dart.core.Iterator"
    "comment" : "<p>The <code>Iterator</code> class provides methods to iterate over an object. It is transparently used by the for-in construct to test for the end of the iteration, and to get the elements.</p> <p>If the object iterated over is changed during the iteration, the behavior is unspecified.</p> <p>The <code>Iterator</code> is initially positioned before the first element. Before accessing the first element the iterator must thus be advanced (<code>moveNext</code>) to point to the first element. If there is no element left, then <code>moveNext</code> returns false.</p> <p>A typical usage of an <code>Iterator</code> looks as follows:</p> <pre><code>var it = obj.iterator; while (it.moveNext()) {   use(it.current); } </code></pre>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "moveNext" : 
        "name" : "moveNext"
        "qualifiedname" : "dart.core.Iterator.moveNext"
        "comment" : "<p>Moves to the next element. Returns true if <code>current</code> contains the next element. Returns false, if no element was left.</p> <p>It is safe to invoke <code>moveNext</code> even when the iterator is already positioned after the last element. In this case <code>moveNext</code> has no effect.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "current" : 
        "name" : "current"
        "qualifiedname" : "dart.core.Iterator.current"
        "comment" : "<p>Returns the current element.</p> <p>Return <code>:null:</code> if the iterator has not yet been moved to the first element, or if the iterator has been moved after the last element of the <code>Iterable</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterator.E"
        "parameters" : 
  "BidirectionalIterator" : 
    "name" : "BidirectionalIterator"
    "qualifiedname" : "dart.core.BidirectionalIterator"
    "comment" : "<p>An <code>Iterator</code> that allows moving backwards as well as forwards.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Iterator"
    "variables" : 
    "methods" : 
      "movePrevious" : 
        "name" : "movePrevious"
        "qualifiedname" : "dart.core.BidirectionalIterator.movePrevious"
        "comment" : "<p>Move back to the previous element.</p> <p>Returns true and updates <code>current</code> if successful. Returns false and sets <code>current</code> to null if there is no previous element.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "_GeneratorIterator" : 
    "name" : "_GeneratorIterator"
    "qualifiedname" : "dart.core._GeneratorIterator"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Iterator"
    "variables" : 
      "_count" : 
        "name" : "_count"
        "qualifiedname" : "dart.core._GeneratorIterator._count"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.int"
      "_generator" : 
        "name" : "_generator"
        "qualifiedname" : "dart.core._GeneratorIterator._generator"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core._Generator"
      "_index" : 
        "name" : "_index"
        "qualifiedname" : "dart.core._GeneratorIterator._index"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core.int"
      "_current" : 
        "name" : "_current"
        "qualifiedname" : "dart.core._GeneratorIterator._current"
        "comment" : ""
        "final" : "false"
        "static" : "false"
        "type" : "dart.core._GeneratorIterator.E"
    "methods" : 
      "_GeneratorIterator" : 
        "name" : "_GeneratorIterator"
        "qualifiedname" : "dart.core._GeneratorIterator._GeneratorIterator"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_count" : 
            "name" : "_count"
            "qualifiedname" : "dart.core._GeneratorIterator._GeneratorIterator#_count"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "_generator" : 
            "name" : "_generator"
            "qualifiedname" : "dart.core._GeneratorIterator._GeneratorIterator#_generator"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core._Generator"
            "value" : "null"
      "moveNext" : 
        "name" : "moveNext"
        "qualifiedname" : "dart.core._GeneratorIterator.moveNext"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "current" : 
        "name" : "current"
        "qualifiedname" : "dart.core._GeneratorIterator.current"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core._GeneratorIterator.E"
        "parameters" : 
  "_GeneratorIterable" : 
    "name" : "_GeneratorIterable"
    "qualifiedname" : "dart.core._GeneratorIterable"
    "comment" : ""
    "superclass" : "dart.collection.IterableBase"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "_count" : 
        "name" : "_count"
        "qualifiedname" : "dart.core._GeneratorIterable._count"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.int"
      "_generator" : 
        "name" : "_generator"
        "qualifiedname" : "dart.core._GeneratorIterable._generator"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core._Generator"
    "methods" : 
      "_GeneratorIterable" : 
        "name" : "_GeneratorIterable"
        "qualifiedname" : "dart.core._GeneratorIterable._GeneratorIterable"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_count" : 
            "name" : "_count"
            "qualifiedname" : "dart.core._GeneratorIterable._GeneratorIterable#_count"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "_generator" : 
            "name" : "_generator"
            "qualifiedname" : "dart.core._GeneratorIterable._GeneratorIterable#_generator"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core._Generator"
            "value" : "null"
      "iterator" : 
        "name" : "iterator"
        "qualifiedname" : "dart.core._GeneratorIterable.iterator"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterator"
        "parameters" : 
  "_Generator" : 
    "name" : "_Generator"
    "qualifiedname" : "dart.core._Generator"
    "comment" : ""
    "superclass" : ""
    "abstract" : "false"
    "typedef" : "true"
    "implements" : 
    "variables" : 
    "methods" : 
  "Iterable" : 
    "name" : "Iterable"
    "qualifiedname" : "dart.core.Iterable"
    "comment" : "<p>The <code>Iterable</code> interface allows to get an <code>Iterator</code> out of an <code>Iterable</code> object.</p> <p>This interface is used by the for-in construct to iterate over an <code>Iterable</code> object. The for-in construct takes an <code>Iterable</code> object at the right-hand side, and calls its <code>iterator</code> method to get an <code>Iterator</code> on it.</p> <p>A user-defined class that implements the <code>Iterable</code> interface can be used as the right-hand side of a for-in construct.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Iterable" : 
        "name" : "Iterable"
        "qualifiedname" : "dart.core.Iterable.Iterable"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "Iterable.generate" : 
        "name" : "Iterable.generate"
        "qualifiedname" : "dart.core.Iterable.Iterable.generate"
        "comment" : "<p>Create an <code>Iterable</code> that generates its elements dynamically.</p> <p>The <code>Iterators</code> created by the <code>Iterable</code> will count from zero to <code>:count - 1:</code> while iterating, and call <code>generator</code> with that index to create the next value.</p> <p>As an <code>Iterable</code>, <code>:new Iterable.generate(n, generator)):</code> is equivalent to [:const [0, ..., n - 1].map(generator):]</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "count" : 
            "name" : "count"
            "qualifiedname" : "dart.core.Iterable.Iterable.generate#count"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "generator" : 
            "name" : "generator"
            "qualifiedname" : "dart.core.Iterable.Iterable.generate#generator"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "iterator" : 
        "name" : "iterator"
        "qualifiedname" : "dart.core.Iterable.iterator"
        "comment" : "<p>Returns an <code>Iterator</code> that iterates over this <code>Iterable</code> object.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterator"
        "parameters" : 
      "map" : 
        "name" : "map"
        "qualifiedname" : "dart.core.Iterable.map"
        "comment" : "<p>Returns a lazy <code>Iterable</code> where each element <code>:e:</code> of <code>this</code> is replaced by the result of <code>:f(e):</code>.</p> <p>This method returns a view of the mapped elements. As long as the returned <code>Iterable</code> is not iterated over, the supplied function <code>f</code> will not be invoked. The transformed elements will not be cached. Iterating multiple times over the the returned <code>Iterable</code> will invoke the supplied function <code>f</code> multiple times on the same element.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "f" : 
            "name" : "f"
            "qualifiedname" : "dart.core.Iterable.map#f"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "where" : 
        "name" : "where"
        "qualifiedname" : "dart.core.Iterable.where"
        "comment" : "<p>Returns a lazy <code>Iterable</code> with all elements that satisfy the predicate <code>test</code>.</p> <p>This method returns a view of the mapped elements. As long as the returned <code>Iterable</code> is not iterated over, the supplied function <code>test</code> will not be invoked. Iterating will not cache results, and thus iterating multiple times over the the returned <code>Iterable</code> will invoke the supplied function <code>test</code> multiple times on the same element.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.where#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "expand" : 
        "name" : "expand"
        "qualifiedname" : "dart.core.Iterable.expand"
        "comment" : "<p>Expand each element of this <code>Iterable</code> into zero or more elements.</p> <p>The resulting Iterable will run through the elements returned by <code>f</code> for each element of this, in order.</p> <p>The returned <code>Iterable</code> is lazy, and will call <code>f</code> for each element of this every time it's iterated.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "f" : 
            "name" : "f"
            "qualifiedname" : "dart.core.Iterable.expand#f"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "contains" : 
        "name" : "contains"
        "qualifiedname" : "dart.core.Iterable.contains"
        "comment" : "<p>Check whether the collection contains an element equal to <code>element</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "element" : 
            "name" : "element"
            "qualifiedname" : "dart.core.Iterable.contains#element"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "forEach" : 
        "name" : "forEach"
        "qualifiedname" : "dart.core.Iterable.forEach"
        "comment" : "<p>Applies the function <code>f</code> to each element of this collection.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "f" : 
            "name" : "f"
            "qualifiedname" : "dart.core.Iterable.forEach#f"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "reduce" : 
        "name" : "reduce"
        "qualifiedname" : "dart.core.Iterable.reduce"
        "comment" : "<p>Reduces a collection to a single value by iteratively combining elements of the collection using the provided function.</p> <p>Example of calculating the sum of an iterable:</p> <pre><code>iterable.reduce((value, element) =&gt; value + element); </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
          "combine" : 
            "name" : "combine"
            "qualifiedname" : "dart.core.Iterable.reduce#combine"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "fold" : 
        "name" : "fold"
        "qualifiedname" : "dart.core.Iterable.fold"
        "comment" : "<p>Reduces a collection to a single value by iteratively combining each element of the collection with an existing value using the provided function.</p> <p>Use <code>initialValue</code> as the initial value, and the function <code>combine</code> to create a new value from the previous one and an element.</p> <p>Example of calculating the sum of an iterable:</p> <pre><code>iterable.fold(0, (prev, element) =&gt; prev + element); </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "initialValue" : 
            "name" : "initialValue"
            "qualifiedname" : "dart.core.Iterable.fold#initialValue"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
          "combine" : 
            "name" : "combine"
            "qualifiedname" : "dart.core.Iterable.fold#combine"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "every" : 
        "name" : "every"
        "qualifiedname" : "dart.core.Iterable.every"
        "comment" : "<p>Returns true if every elements of this collection satisify the predicate <code>test</code>. Returns <code>false</code> otherwise.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.every#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "join" : 
        "name" : "join"
        "qualifiedname" : "dart.core.Iterable.join"
        "comment" : "<p>Converts each element to a <code>String</code> and concatenates the strings.</p> <p>Converts each element to a <code>String</code> by calling <code>Object.toString</code> on it. Then concatenates the strings, optionally separated by the <code>separator</code> string.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "separator" : 
            "name" : "separator"
            "qualifiedname" : "dart.core.Iterable.join#separator"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
      "any" : 
        "name" : "any"
        "qualifiedname" : "dart.core.Iterable.any"
        "comment" : "<p>Returns true if one element of this collection satisfies the predicate <code>test</code>. Returns false otherwise.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.any#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "toList" : 
        "name" : "toList"
        "qualifiedname" : "dart.core.Iterable.toList"
        "comment" : "<p>Creates a <code>List</code> containing the elements of this <code>Iterable</code>.</p> <p>The elements will be in iteration order. The list is fixed-length if <code>growable</code> is false.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
          "growable" : 
            "name" : "growable"
            "qualifiedname" : "dart.core.Iterable.toList#growable"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "true"
      "toSet" : 
        "name" : "toSet"
        "qualifiedname" : "dart.core.Iterable.toSet"
        "comment" : "<p>Creates a <code>Set</code> containing the elements of this <code>Iterable</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Set"
        "parameters" : 
      "length" : 
        "name" : "length"
        "qualifiedname" : "dart.core.Iterable.length"
        "comment" : "<p>Returns the number of elements in <code>this</code>.</p> <p>Counting all elements may be involve running through all elements and can therefore be slow.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "isEmpty" : 
        "name" : "isEmpty"
        "qualifiedname" : "dart.core.Iterable.isEmpty"
        "comment" : "<p>Returns true if there is no element in this collection.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isNotEmpty" : 
        "name" : "isNotEmpty"
        "qualifiedname" : "dart.core.Iterable.isNotEmpty"
        "comment" : "<p>Returns true if there is at least one element in this collection.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "take" : 
        "name" : "take"
        "qualifiedname" : "dart.core.Iterable.take"
        "comment" : "<p>Returns an <code>Iterable</code> with at most <code>n</code> elements.</p> <p>The returned <code>Iterable</code> may contain fewer than <code>n</code> elements, if <code>this</code> contains fewer than <code>n</code> elements.</p> <p>It is an error if <code>n</code> is negative.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "n" : 
            "name" : "n"
            "qualifiedname" : "dart.core.Iterable.take#n"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "takeWhile" : 
        "name" : "takeWhile"
        "qualifiedname" : "dart.core.Iterable.takeWhile"
        "comment" : "<p>Returns an <code>Iterable</code> that stops once <code>test</code> is not satisfied anymore.</p> <p>The filtering happens lazily. Every new <code>Iterator</code> of the returned <code>Iterable</code> will start iterating over the elements of <code>this</code>.</p> <p>When the iterator encounters an element <code>e</code> that does not satisfy <code>test</code>, it discards <code>e</code> and moves into the finished state. That is, it will not ask or provide any more elements.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.takeWhile#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "skip" : 
        "name" : "skip"
        "qualifiedname" : "dart.core.Iterable.skip"
        "comment" : "<p>Returns an <code>Iterable</code> that skips the first <code>n</code> elements.</p> <p>If <code>this</code> has fewer than <code>n</code> elements, then the resulting <code>Iterable</code> will be empty.</p> <p>It is an error if <code>n</code> is negative.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "n" : 
            "name" : "n"
            "qualifiedname" : "dart.core.Iterable.skip#n"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "skipWhile" : 
        "name" : "skipWhile"
        "qualifiedname" : "dart.core.Iterable.skipWhile"
        "comment" : "<p>Returns an <code>Iterable</code> that skips elements while <code>test</code> is satisfied.</p> <p>The filtering happens lazily. Every new <code>Iterator</code> of the returned <code>Iterable</code> iterates over all elements of <code>this</code>.</p> <p>As long as the iterator's elements satisfy <code>test</code> they are discarded. Once an element does not satisfy the <code>test</code> the iterator stops testing and uses every later element unconditionally. That is, the elements of the returned <code>Iterable</code> are the elements of <code>this</code> starting from the first element that does not satisfy <code>test</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.skipWhile#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "first" : 
        "name" : "first"
        "qualifiedname" : "dart.core.Iterable.first"
        "comment" : "<p>Returns the first element.</p> <p>If <code>this</code> is empty throws a <code>StateError</code>. Otherwise this method is equivalent to <code>:this.elementAt(0):</code></p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
      "last" : 
        "name" : "last"
        "qualifiedname" : "dart.core.Iterable.last"
        "comment" : "<p>Returns the last element.</p> <p>If <code>this</code> is empty throws a <code>StateError</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
      "single" : 
        "name" : "single"
        "qualifiedname" : "dart.core.Iterable.single"
        "comment" : "<p>Returns the single element in <code>this</code>.</p> <p>If <code>this</code> is empty or has more than one element throws a <code>StateError</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
      "firstWhere" : 
        "name" : "firstWhere"
        "qualifiedname" : "dart.core.Iterable.firstWhere"
        "comment" : "<p>Returns the first element that satisfies the given predicate <code>test</code>.</p> <p>If none matches, the result of invoking the <code>orElse</code> function is returned. By default, when <code>orElse</code> is <code>null</code>, a <code>StateError</code> is thrown.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.firstWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "orElse" : 
            "name" : "orElse"
            "qualifiedname" : "dart.core.Iterable.firstWhere#orElse"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "lastWhere" : 
        "name" : "lastWhere"
        "qualifiedname" : "dart.core.Iterable.lastWhere"
        "comment" : "<p>Returns the last element that satisfies the given predicate <code>test</code>.</p> <p>If none matches, the result of invoking the <code>orElse</code> function is returned. By default, when <code>orElse</code> is <code>null</code>, a <code>StateError</code> is thrown.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.lastWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "orElse" : 
            "name" : "orElse"
            "qualifiedname" : "dart.core.Iterable.lastWhere#orElse"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "singleWhere" : 
        "name" : "singleWhere"
        "qualifiedname" : "dart.core.Iterable.singleWhere"
        "comment" : "<p>Returns the single element that satisfies <code>test</code>. If no or more than one element match then a <code>StateError</code> is thrown.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
          "test" : 
            "name" : "test"
            "qualifiedname" : "dart.core.Iterable.singleWhere#test"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "elementAt" : 
        "name" : "elementAt"
        "qualifiedname" : "dart.core.Iterable.elementAt"
        "comment" : "<p>Returns the <code>index</code>th element.</p> <p>If <code>this</code> has fewer than <code>index</code> elements throws a <code>RangeError</code>.</p> <p>Note: if <code>this</code> does not have a deterministic iteration order then the function may simply return any element without any iteration if there are at least <code>index</code> elements in <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Iterable.E"
        "parameters" : 
          "index" : 
            "name" : "index"
            "qualifiedname" : "dart.core.Iterable.elementAt#index"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
  "Invocation" : 
    "name" : "Invocation"
    "qualifiedname" : "dart.core.Invocation"
    "comment" : "<p>Representation of the invocation of a member on an object.</p> <p>This is the type of objects passed to <code>Object.noSuchMethod</code> when an object doesn't support the member invocation that was attempted on it.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "memberName" : 
        "name" : "memberName"
        "qualifiedname" : "dart.core.Invocation.memberName"
        "comment" : "<p>The name of the invoked member.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Symbol"
        "parameters" : 
      "positionalArguments" : 
        "name" : "positionalArguments"
        "qualifiedname" : "dart.core.Invocation.positionalArguments"
        "comment" : "<p>An unmodifiable view of the positional arguments of the call.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.List"
        "parameters" : 
      "namedArguments" : 
        "name" : "namedArguments"
        "qualifiedname" : "dart.core.Invocation.namedArguments"
        "comment" : "<p>An unmodifiable view of the named arguments of the call.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Map"
        "parameters" : 
      "isMethod" : 
        "name" : "isMethod"
        "qualifiedname" : "dart.core.Invocation.isMethod"
        "comment" : "<p>Whether the invocation was a method call.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isGetter" : 
        "name" : "isGetter"
        "qualifiedname" : "dart.core.Invocation.isGetter"
        "comment" : "<p>Whether the invocation was a getter call. If so, both types of arguments will be null.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isSetter" : 
        "name" : "isSetter"
        "qualifiedname" : "dart.core.Invocation.isSetter"
        "comment" : "<p>Whether the invocation was a setter call.</p> <p>If so, <code>arguments</code> will have exactly one positonal argument, and namedArguments will be null.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isAccessor" : 
        "name" : "isAccessor"
        "qualifiedname" : "dart.core.Invocation.isAccessor"
        "comment" : "<p>Whether the invocation was a getter or a setter call.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
  "int" : 
    "name" : "int"
    "qualifiedname" : "dart.core.int"
    "comment" : "<p>Representation of Dart integers containing integer specific operations and specialization of operations inherited from <code>num</code>.</p> <p>Integers can be arbitrarily large in Dart.</p> <p><em>Note however, that when compiling to JavaScript, integers are implemented as JavaScript numbers. When compiling to JavaScript, integers are therefore restricted to 53 significant bits because all JavaScript numbers are double-precision floating point values. The behavior of the operators and methods in the <code>int</code> class therefore sometimes differs between the Dart VM and Dart code compiled to JavaScript.</em></p>"
    "superclass" : "dart.core.num"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "&" : 
        "name" : "&"
        "qualifiedname" : "dart.core.int.&"
        "comment" : "<p>The bit-wise and operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.int.&#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "|" : 
        "name" : "|"
        "qualifiedname" : "dart.core.int.|"
        "comment" : "<p>The bit-wise or operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.int.|#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "^" : 
        "name" : "^"
        "qualifiedname" : "dart.core.int.^"
        "comment" : "<p>The bit-wise xor operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.int.^#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "~" : 
        "name" : "~"
        "qualifiedname" : "dart.core.int.~"
        "comment" : "<p>The bit-wise negate operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "<<" : 
        "name" : "<<"
        "qualifiedname" : "dart.core.int.<<"
        "comment" : "<p>The left shift operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "shiftAmount" : 
            "name" : "shiftAmount"
            "qualifiedname" : "dart.core.int.<<#shiftAmount"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      ">>" : 
        "name" : ">>"
        "qualifiedname" : "dart.core.int.>>"
        "comment" : "<p>The right shift operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "shiftAmount" : 
            "name" : "shiftAmount"
            "qualifiedname" : "dart.core.int.>>#shiftAmount"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "isEven" : 
        "name" : "isEven"
        "qualifiedname" : "dart.core.int.isEven"
        "comment" : "<p>Returns true if and only if this integer is even.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "isOdd" : 
        "name" : "isOdd"
        "qualifiedname" : "dart.core.int.isOdd"
        "comment" : "<p>Returns true if and only if this integer is odd.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
      "unary-" : 
        "name" : "unary-"
        "qualifiedname" : "dart.core.int.unary-"
        "comment" : "<p>Negate operator. Negating an integer produces an integer.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "abs" : 
        "name" : "abs"
        "qualifiedname" : "dart.core.int.abs"
        "comment" : "<p>Returns the absolute value of this integer.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "round" : 
        "name" : "round"
        "qualifiedname" : "dart.core.int.round"
        "comment" : "<p>Returns <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "floor" : 
        "name" : "floor"
        "qualifiedname" : "dart.core.int.floor"
        "comment" : "<p>Returns <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "ceil" : 
        "name" : "ceil"
        "qualifiedname" : "dart.core.int.ceil"
        "comment" : "<p>Returns <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "truncate" : 
        "name" : "truncate"
        "qualifiedname" : "dart.core.int.truncate"
        "comment" : "<p>Returns <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "roundToDouble" : 
        "name" : "roundToDouble"
        "qualifiedname" : "dart.core.int.roundToDouble"
        "comment" : "<p>Returns <code>this.toDouble()</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "floorToDouble" : 
        "name" : "floorToDouble"
        "qualifiedname" : "dart.core.int.floorToDouble"
        "comment" : "<p>Returns <code>this.toDouble()</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "ceilToDouble" : 
        "name" : "ceilToDouble"
        "qualifiedname" : "dart.core.int.ceilToDouble"
        "comment" : "<p>Returns <code>this.toDouble()</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "truncateToDouble" : 
        "name" : "truncateToDouble"
        "qualifiedname" : "dart.core.int.truncateToDouble"
        "comment" : "<p>Returns <code>this.toDouble()</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.int.toString"
        "comment" : "<p>Returns a representation of this <code>int</code> value.</p> <p>It should always be the case that if <code>:i:</code> is an <code>int</code> value, then <code>:i == int.parse(i.toString()):</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "toRadixString" : 
        "name" : "toRadixString"
        "qualifiedname" : "dart.core.int.toRadixString"
        "comment" : "<p>Converts <code>this</code> to a string representation in the given <code>radix</code>.</p> <p>In the string representation, lower-case letters are used for digits above '9'.</p> <p>The <code>radix</code> argument must be an integer in the range 2 to 36.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
          "radix" : 
            "name" : "radix"
            "qualifiedname" : "dart.core.int.toRadixString#radix"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "parse" : 
        "name" : "parse"
        "qualifiedname" : "dart.core.int.parse"
        "comment" : "<p>Parse <code>source</code> as an integer literal and return its value.</p> <p>The <code>radix</code> must be in the range 2..36. The digits used are first the decimal digits 0..9, and then the letters 'a'..'z'. Accepts capital letters as well.</p> <p>If no <code>radix</code> is given then it defaults to 16 if the string starts with \"0x\", \"-0x\" or \"+0x\" and 10 otherwise.</p> <p>The <code>source</code> must be a non-empty sequence of base-<code>radix</code> digits, optionally prefixed with a minus or plus sign ('-' or '+').</p> <p>It must always be the case for an int <code>:n:</code> and radix <code>:r:</code> that <code>:n == parseRadix(n.toRadixString(r), r):</code>.</p> <p>If the <code>source</code> is not a valid integer literal, optionally prefixed by a sign, the <code>onError</code> is called with the <code>source</code> as argument, and its return value is used instead. If no <code>onError</code> is provided, a <code>FormatException</code> is thrown.</p> <p>The <code>onError</code> function is only invoked if <code>source</code> is a <code>String</code>. It is not invoked if the <code>source</code> is, for example, <code>null</code>.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
          "source" : 
            "name" : "source"
            "qualifiedname" : "dart.core.int.parse#source"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "radix" : 
            "name" : "radix"
            "qualifiedname" : "dart.core.int.parse#radix"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "onError" : 
            "name" : "onError"
            "qualifiedname" : "dart.core.int.parse#onError"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
  "Function" : 
    "name" : "Function"
    "qualifiedname" : "dart.core.Function"
    "comment" : "<p>Super-type of all function types.</p> <p>A function value, or an instance of a class with a \"call\" method, is a subtype of a function type, and as such, a subtype of <code>Function</code>.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "apply" : 
        "name" : "apply"
        "qualifiedname" : "dart.core.Function.apply"
        "comment" : "<p>Dynamically call <code>function</code> with the specified arguments.</p> <p>Acts the same as calling function with positional arguments corresponding to the elements of <code>positionalArguments</code> and named arguments corresponding to the elements of <code>namedArguments</code>.</p> <p>This includes giving the same errors if <code>function</code> isn't callable or if it expects different parameters.</p> <p>Example: [: Map<Symbol, dynamic> namedArguments = new Map<Symbol, dynamic>(); namedArguments[const Symbol(\"f\")] = 4; namedArguments[const Symbol(\"g\")] = 5; Function.apply(foo, [1,2,3], namedArguments); :] gives exactly the same result as <code>: foo(1, 2, 3, f: 4, g: 5) :</code>.</p> <p>If <code>positionalArguments</code> is null, it's considered an empty list. If <code>namedArguments</code> is omitted or null, it is considered an empty map.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dynamic"
        "parameters" : 
          "function" : 
            "name" : "function"
            "qualifiedname" : "dart.core.Function.apply#function"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "positionalArguments" : 
            "name" : "positionalArguments"
            "qualifiedname" : "dart.core.Function.apply#positionalArguments"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "namedArguments" : 
            "name" : "namedArguments"
            "qualifiedname" : "dart.core.Function.apply#namedArguments"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
  "Expando" : 
    "name" : "Expando"
    "qualifiedname" : "dart.core.Expando"
    "comment" : "<p>An <code>Expando</code> allows adding new properties to objects.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "name" : 
        "name" : "name"
        "qualifiedname" : "dart.core.Expando.name"
        "comment" : "<p>The name of the this <code>Expando</code> as passed to the constructor. If no name was passed to the constructor, the name is <code>null</code>.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "Expando" : 
        "name" : "Expando"
        "qualifiedname" : "dart.core.Expando.Expando"
        "comment" : "<p>Creates a new <code>Expando</code>. The optional name is only used for debugging purposes and creating two different <code>Expando</code>s with the same name yields two <code>Expando</code>s that work on different properties of the objects they are used on.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "dart.core.Expando.Expando#name"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.Expando.toString"
        "comment" : "<p>Expando toString method override.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "dart.core.Expando.[]"
        "comment" : "<p>Gets the value of this <code>Expando</code>'s property on the given object. If the object hasn't been expanded, the method returns <code>null</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Expando.T"
        "parameters" : 
          "object" : 
            "name" : "object"
            "qualifiedname" : "dart.core.Expando.[]#object"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "[]=" : 
        "name" : "[]="
        "qualifiedname" : "dart.core.Expando.[]="
        "comment" : "<p>Sets the value of this <code>Expando</code>'s property on the given object. Properties can effectively be removed again by setting their value to null.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "object" : 
            "name" : "object"
            "qualifiedname" : "dart.core.Expando.[]=#object"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.Expando.[]=#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Expando.T"
            "value" : "null"
  "IntegerDivisionByZeroException" : 
    "name" : "IntegerDivisionByZeroException"
    "qualifiedname" : "dart.core.IntegerDivisionByZeroException"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Exception"
    "variables" : 
    "methods" : 
      "IntegerDivisionByZeroException" : 
        "name" : "IntegerDivisionByZeroException"
        "qualifiedname" : "dart.core.IntegerDivisionByZeroException.IntegerDivisionByZeroException"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.IntegerDivisionByZeroException.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "FormatException" : 
    "name" : "FormatException"
    "qualifiedname" : "dart.core.FormatException"
    "comment" : "<p>Exception thrown when a string or some other data does not have an expected format and cannot be parsed or processed.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Exception"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core.FormatException.message"
        "comment" : "<p>A message describing the format error.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "FormatException" : 
        "name" : "FormatException"
        "qualifiedname" : "dart.core.FormatException.FormatException"
        "comment" : "<p>Creates a new FormatException with an optional error <code>message</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.FormatException.FormatException#message"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.String"
            "value" : "\"\""
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.FormatException.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "_ExceptionImplementation" : 
    "name" : "_ExceptionImplementation"
    "qualifiedname" : "dart.core._ExceptionImplementation"
    "comment" : "<p>Default implementation of <code>Exception</code> which carries a message.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Exception"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core._ExceptionImplementation.message"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dynamic"
    "methods" : 
      "_ExceptionImplementation" : 
        "name" : "_ExceptionImplementation"
        "qualifiedname" : "dart.core._ExceptionImplementation._ExceptionImplementation"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core._ExceptionImplementation._ExceptionImplementation#message"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core._ExceptionImplementation.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "Exception" : 
    "name" : "Exception"
    "qualifiedname" : "dart.core.Exception"
    "comment" : "<p>A marker interface implemented by all core library exceptions.</p> <p>An <code>Exception</code> is intended to convey information to the user about a failure, so that the error can be addressed programmatically. It is intended to be caught, and it should contain useful data fields.</p> <p>Creating instances of <code>Exception</code> directly with <code>:new Exception(\"message\"):</code> is discouraged, and only included as a temporary measure during development, until the actual exceptions used by a library are done.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Exception" : 
        "name" : "Exception"
        "qualifiedname" : "dart.core.Exception.Exception"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.Exception"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.Exception.Exception#message"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
  "CyclicInitializationError" : 
    "name" : "CyclicInitializationError"
    "qualifiedname" : "dart.core.CyclicInitializationError"
    "comment" : "<p>Error thrown when a lazily initialized variable cannot be initialized.</p> <p>A static/library variable with an initializer expression is initialized the first time it is read. If evaluating the initializer expression causes another read of the variable, this error is thrown.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "variableName" : 
        "name" : "variableName"
        "qualifiedname" : "dart.core.CyclicInitializationError.variableName"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "CyclicInitializationError" : 
        "name" : "CyclicInitializationError"
        "qualifiedname" : "dart.core.CyclicInitializationError.CyclicInitializationError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "variableName" : 
            "name" : "variableName"
            "qualifiedname" : "dart.core.CyclicInitializationError.CyclicInitializationError#variableName"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.CyclicInitializationError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "StackOverflowError" : 
    "name" : "StackOverflowError"
    "qualifiedname" : "dart.core.StackOverflowError"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
      "StackOverflowError" : 
        "name" : "StackOverflowError"
        "qualifiedname" : "dart.core.StackOverflowError.StackOverflowError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.StackOverflowError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "OutOfMemoryError" : 
    "name" : "OutOfMemoryError"
    "qualifiedname" : "dart.core.OutOfMemoryError"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
      "OutOfMemoryError" : 
        "name" : "OutOfMemoryError"
        "qualifiedname" : "dart.core.OutOfMemoryError.OutOfMemoryError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.OutOfMemoryError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "ConcurrentModificationError" : 
    "name" : "ConcurrentModificationError"
    "qualifiedname" : "dart.core.ConcurrentModificationError"
    "comment" : "<p>Error occurring when a collection is modified during iteration.</p> <p>Some modifications may be allowed for some collections, so each collection (<code>Iterable</code> or similar collection of values) should declare which operations are allowed during an iteration.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "modifiedObject" : 
        "name" : "modifiedObject"
        "qualifiedname" : "dart.core.ConcurrentModificationError.modifiedObject"
        "comment" : "<p>The object that was modified in an incompatible way.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Object"
    "methods" : 
      "ConcurrentModificationError" : 
        "name" : "ConcurrentModificationError"
        "qualifiedname" : "dart.core.ConcurrentModificationError.ConcurrentModificationError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "modifiedObject" : 
            "name" : "modifiedObject"
            "qualifiedname" : "dart.core.ConcurrentModificationError.ConcurrentModificationError#modifiedObject"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.ConcurrentModificationError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "StateError" : 
    "name" : "StateError"
    "qualifiedname" : "dart.core.StateError"
    "comment" : "<p>The operation was not allowed by the current state of the object.</p> <p>This is a generic error used for a variety of different erroneous actions. The message should be descriptive.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core.StateError.message"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "StateError" : 
        "name" : "StateError"
        "qualifiedname" : "dart.core.StateError.StateError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.StateError.StateError#message"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.StateError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "UnimplementedError" : 
    "name" : "UnimplementedError"
    "qualifiedname" : "dart.core.UnimplementedError"
    "comment" : "<p>Thrown by operations that have not been implemented yet.</p> <p>This <code>Error</code> is thrown by unfinished code that hasn't yet implemented all the features it needs.</p> <p>If a class is not intending to implement the feature, it should throw an <code>UnsupportedError</code> instead. This error is only intended for use during development.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.UnsupportedError"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core.UnimplementedError.message"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "UnimplementedError" : 
        "name" : "UnimplementedError"
        "qualifiedname" : "dart.core.UnimplementedError.UnimplementedError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.UnimplementedError.UnimplementedError#message"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.UnimplementedError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "UnsupportedError" : 
    "name" : "UnsupportedError"
    "qualifiedname" : "dart.core.UnsupportedError"
    "comment" : "<p>The operation was not allowed by the object.</p> <p>This <code>Error</code> is thrown when an instance cannot implement one of the methods in its signature.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core.UnsupportedError.message"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "UnsupportedError" : 
        "name" : "UnsupportedError"
        "qualifiedname" : "dart.core.UnsupportedError.UnsupportedError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.UnsupportedError.UnsupportedError#message"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.UnsupportedError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "NoSuchMethodError" : 
    "name" : "NoSuchMethodError"
    "qualifiedname" : "dart.core.NoSuchMethodError"
    "comment" : "<p>Error thrown by the default implementation of <code>:noSuchMethod:</code> on <code>Object</code>.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "_receiver" : 
        "name" : "_receiver"
        "qualifiedname" : "dart.core.NoSuchMethodError._receiver"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Object"
      "_memberName" : 
        "name" : "_memberName"
        "qualifiedname" : "dart.core.NoSuchMethodError._memberName"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "_arguments" : 
        "name" : "_arguments"
        "qualifiedname" : "dart.core.NoSuchMethodError._arguments"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.List"
      "_namedArguments" : 
        "name" : "_namedArguments"
        "qualifiedname" : "dart.core.NoSuchMethodError._namedArguments"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
      "_existingArgumentNames" : 
        "name" : "_existingArgumentNames"
        "qualifiedname" : "dart.core.NoSuchMethodError._existingArgumentNames"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.List"
    "methods" : 
      "NoSuchMethodError" : 
        "name" : "NoSuchMethodError"
        "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError"
        "comment" : "<p>Create a <code>NoSuchMethodError</code> corresponding to a failed method call.</p> <p>The first parameter to this constructor is the receiver of the method call. That is, the object on which the method was attempted called. The second parameter is the name of the called method or accessor. The third parameter is a list of the positional arguments that the method was called with. The fourth parameter is a map from <code>String</code> names to the values of named arguments that the method was called with. The optional <code>exisitingArgumentNames</code> is the expected parameters of a method with the same name on the receiver, if available. This is the method that would have been called if the parameters had matched.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_receiver" : 
            "name" : "_receiver"
            "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError#_receiver"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
          "_memberName" : 
            "name" : "_memberName"
            "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError#_memberName"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "_arguments" : 
            "name" : "_arguments"
            "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError#_arguments"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "_namedArguments" : 
            "name" : "_namedArguments"
            "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError#_namedArguments"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "existingArgumentNames" : 
            "name" : "existingArgumentNames"
            "qualifiedname" : "dart.core.NoSuchMethodError.NoSuchMethodError#existingArgumentNames"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.List"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.NoSuchMethodError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "AbstractClassInstantiationError" : 
    "name" : "AbstractClassInstantiationError"
    "qualifiedname" : "dart.core.AbstractClassInstantiationError"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "_className" : 
        "name" : "_className"
        "qualifiedname" : "dart.core.AbstractClassInstantiationError._className"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
    "methods" : 
      "AbstractClassInstantiationError" : 
        "name" : "AbstractClassInstantiationError"
        "qualifiedname" : "dart.core.AbstractClassInstantiationError.AbstractClassInstantiationError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_className" : 
            "name" : "_className"
            "qualifiedname" : "dart.core.AbstractClassInstantiationError.AbstractClassInstantiationError#_className"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.AbstractClassInstantiationError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "FallThroughError" : 
    "name" : "FallThroughError"
    "qualifiedname" : "dart.core.FallThroughError"
    "comment" : "<p>Error thrown when control reaches the end of a switch case.</p> <p>The Dart specification requires this error to be thrown when control reaches the end of a switch case (except the last case of a switch) without meeting a break or similar end of the control flow.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
      "FallThroughError" : 
        "name" : "FallThroughError"
        "qualifiedname" : "dart.core.FallThroughError.FallThroughError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
  "RangeError" : 
    "name" : "RangeError"
    "qualifiedname" : "dart.core.RangeError"
    "comment" : "<p>Error thrown because of an index outside of the valid range.</p>"
    "superclass" : "dart.core.ArgumentError"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "RangeError" : 
        "name" : "RangeError"
        "qualifiedname" : "dart.core.RangeError.RangeError"
        "comment" : "<p>Create a new <code>RangeError</code> with the given <code>message</code>.</p> <p>Temporarily made const for backwards compatibilty.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.RangeError.RangeError#message"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "RangeError.value" : 
        "name" : "RangeError.value"
        "qualifiedname" : "dart.core.RangeError.RangeError.value"
        "comment" : "<p>Create a new <code>RangeError</code> with a message for the given <code>value</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.RangeError.RangeError.value#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "RangeError.range" : 
        "name" : "RangeError.range"
        "qualifiedname" : "dart.core.RangeError.RangeError.range"
        "comment" : "<p>Create a new <code>RangeError</code> with a message for a value and a range.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "value" : 
            "name" : "value"
            "qualifiedname" : "dart.core.RangeError.RangeError.range#value"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
          "start" : 
            "name" : "start"
            "qualifiedname" : "dart.core.RangeError.RangeError.range#start"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
          "end" : 
            "name" : "end"
            "qualifiedname" : "dart.core.RangeError.RangeError.range#end"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.RangeError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "ArgumentError" : 
    "name" : "ArgumentError"
    "qualifiedname" : "dart.core.ArgumentError"
    "comment" : "<p>Error thrown when a function is passed an unacceptable argument.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
      "message" : 
        "name" : "message"
        "qualifiedname" : "dart.core.ArgumentError.message"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dynamic"
    "methods" : 
      "ArgumentError" : 
        "name" : "ArgumentError"
        "qualifiedname" : "dart.core.ArgumentError.ArgumentError"
        "comment" : "<p>The <code>message</code> describes the erroneous argument.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "message" : 
            "name" : "message"
            "qualifiedname" : "dart.core.ArgumentError.ArgumentError#message"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.ArgumentError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "NullThrownError" : 
    "name" : "NullThrownError"
    "qualifiedname" : "dart.core.NullThrownError"
    "comment" : "<p>Error thrown when attempting to throw <code>:null:</code>.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
      "NullThrownError" : 
        "name" : "NullThrownError"
        "qualifiedname" : "dart.core.NullThrownError.NullThrownError"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.NullThrownError.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "CastError" : 
    "name" : "CastError"
    "qualifiedname" : "dart.core.CastError"
    "comment" : "<p>Error thrown by the runtime system when a cast operation fails.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
  "TypeError" : 
    "name" : "TypeError"
    "qualifiedname" : "dart.core.TypeError"
    "comment" : "<p>Error thrown by the runtime system when a type assertion fails.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.AssertionError"
    "variables" : 
    "methods" : 
  "AssertionError" : 
    "name" : "AssertionError"
    "qualifiedname" : "dart.core.AssertionError"
    "comment" : "<p>Error thrown by the runtime system when an assert statement fails.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Error"
    "variables" : 
    "methods" : 
  "Error" : 
    "name" : "Error"
    "qualifiedname" : "dart.core.Error"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "Error" : 
        "name" : "Error"
        "qualifiedname" : "dart.core.Error.Error"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "safeToString" : 
        "name" : "safeToString"
        "qualifiedname" : "dart.core.Error.safeToString"
        "comment" : "<p>Safely convert a value to a <code>String</code> description.</p> <p>The conversion is guaranteed to not throw, so it won't use the object's toString method.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "object" : 
            "name" : "object"
            "qualifiedname" : "dart.core.Error.safeToString#object"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
      "_objectToString" : 
        "name" : "_objectToString"
        "qualifiedname" : "dart.core.Error._objectToString"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.String"
        "parameters" : 
          "object" : 
            "name" : "object"
            "qualifiedname" : "dart.core.Error._objectToString#object"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Object"
            "value" : "null"
  "Duration" : 
    "name" : "Duration"
    "qualifiedname" : "dart.core.Duration"
    "comment" : "<p>A <code>Duration</code> represents a time span. A duration can be negative.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Comparable"
    "variables" : 
      "MICROSECONDS_PER_MILLISECOND" : 
        "name" : "MICROSECONDS_PER_MILLISECOND"
        "qualifiedname" : "dart.core.Duration.MICROSECONDS_PER_MILLISECOND"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MILLISECONDS_PER_SECOND" : 
        "name" : "MILLISECONDS_PER_SECOND"
        "qualifiedname" : "dart.core.Duration.MILLISECONDS_PER_SECOND"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SECONDS_PER_MINUTE" : 
        "name" : "SECONDS_PER_MINUTE"
        "qualifiedname" : "dart.core.Duration.SECONDS_PER_MINUTE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MINUTES_PER_HOUR" : 
        "name" : "MINUTES_PER_HOUR"
        "qualifiedname" : "dart.core.Duration.MINUTES_PER_HOUR"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "HOURS_PER_DAY" : 
        "name" : "HOURS_PER_DAY"
        "qualifiedname" : "dart.core.Duration.HOURS_PER_DAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MICROSECONDS_PER_SECOND" : 
        "name" : "MICROSECONDS_PER_SECOND"
        "qualifiedname" : "dart.core.Duration.MICROSECONDS_PER_SECOND"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MICROSECONDS_PER_MINUTE" : 
        "name" : "MICROSECONDS_PER_MINUTE"
        "qualifiedname" : "dart.core.Duration.MICROSECONDS_PER_MINUTE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MICROSECONDS_PER_HOUR" : 
        "name" : "MICROSECONDS_PER_HOUR"
        "qualifiedname" : "dart.core.Duration.MICROSECONDS_PER_HOUR"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MICROSECONDS_PER_DAY" : 
        "name" : "MICROSECONDS_PER_DAY"
        "qualifiedname" : "dart.core.Duration.MICROSECONDS_PER_DAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MILLISECONDS_PER_MINUTE" : 
        "name" : "MILLISECONDS_PER_MINUTE"
        "qualifiedname" : "dart.core.Duration.MILLISECONDS_PER_MINUTE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MILLISECONDS_PER_HOUR" : 
        "name" : "MILLISECONDS_PER_HOUR"
        "qualifiedname" : "dart.core.Duration.MILLISECONDS_PER_HOUR"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MILLISECONDS_PER_DAY" : 
        "name" : "MILLISECONDS_PER_DAY"
        "qualifiedname" : "dart.core.Duration.MILLISECONDS_PER_DAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SECONDS_PER_HOUR" : 
        "name" : "SECONDS_PER_HOUR"
        "qualifiedname" : "dart.core.Duration.SECONDS_PER_HOUR"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SECONDS_PER_DAY" : 
        "name" : "SECONDS_PER_DAY"
        "qualifiedname" : "dart.core.Duration.SECONDS_PER_DAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MINUTES_PER_DAY" : 
        "name" : "MINUTES_PER_DAY"
        "qualifiedname" : "dart.core.Duration.MINUTES_PER_DAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "ZERO" : 
        "name" : "ZERO"
        "qualifiedname" : "dart.core.Duration.ZERO"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.Duration"
      "_duration" : 
        "name" : "_duration"
        "qualifiedname" : "dart.core.Duration._duration"
        "comment" : "<p>This <code>Duration</code> in microseconds.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.int"
    "methods" : 
      "Duration" : 
        "name" : "Duration"
        "qualifiedname" : "dart.core.Duration.Duration"
        "comment" : "<p>The duration is the sum of all individual parts. This means that individual parts don't need to be less than the next-bigger unit. For example <code>hours</code> is allowed to have a value greater than 23.</p> <p>All individual parts are allowed to be negative. All arguments are by default 0.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "days" : 
            "name" : "days"
            "qualifiedname" : "dart.core.Duration.Duration#days"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "hours" : 
            "name" : "hours"
            "qualifiedname" : "dart.core.Duration.Duration#hours"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "minutes" : 
            "name" : "minutes"
            "qualifiedname" : "dart.core.Duration.Duration#minutes"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "seconds" : 
            "name" : "seconds"
            "qualifiedname" : "dart.core.Duration.Duration#seconds"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "milliseconds" : 
            "name" : "milliseconds"
            "qualifiedname" : "dart.core.Duration.Duration#milliseconds"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "microseconds" : 
            "name" : "microseconds"
            "qualifiedname" : "dart.core.Duration.Duration#microseconds"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "+" : 
        "name" : "+"
        "qualifiedname" : "dart.core.Duration.+"
        "comment" : "<p>Returns the sum of this <code>Duration</code> and <code>other</code>  as a new <code>Duration</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.+#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "-" : 
        "name" : "-"
        "qualifiedname" : "dart.core.Duration.-"
        "comment" : "<p>Returns the difference of this <code>Duration</code> and <code>other</code> as a new <code>Duration</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.-#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "*" : 
        "name" : "*"
        "qualifiedname" : "dart.core.Duration.*"
        "comment" : "<p>Multiplies this <code>Duration</code> by the given <code>factor</code> and returns the result as a new <code>Duration</code>.</p> <p>Note that when <code>factor</code> is a double, and the duration is greater than 53 bits, precision is lost because of double-precision arithmetic.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
          "factor" : 
            "name" : "factor"
            "qualifiedname" : "dart.core.Duration.*#factor"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "~/" : 
        "name" : "~/"
        "qualifiedname" : "dart.core.Duration.~/"
        "comment" : "<p>Divides this <code>Duration</code> by the given <code>quotient</code> and returns the truncated result as a new <code>Duration</code>.</p> <p>Throws an <code>IntegerDivisionByZeroException</code> if <code>quotient</code> is <code>0</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
          "quotient" : 
            "name" : "quotient"
            "qualifiedname" : "dart.core.Duration.~/#quotient"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
      "<" : 
        "name" : "<"
        "qualifiedname" : "dart.core.Duration.<"
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.<#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      ">" : 
        "name" : ">"
        "qualifiedname" : "dart.core.Duration.>"
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.>#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "<=" : 
        "name" : "<="
        "qualifiedname" : "dart.core.Duration.<="
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.<=#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      ">=" : 
        "name" : ">="
        "qualifiedname" : "dart.core.Duration.>="
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.>=#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "inDays" : 
        "name" : "inDays"
        "qualifiedname" : "dart.core.Duration.inDays"
        "comment" : "<p>This <code>Duration</code> in days. Incomplete days are discarded</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "inHours" : 
        "name" : "inHours"
        "qualifiedname" : "dart.core.Duration.inHours"
        "comment" : "<p>This <code>Duration</code> in hours. Incomplete hours are discarded.</p> <p>The returned value can be greater than 23.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "inMinutes" : 
        "name" : "inMinutes"
        "qualifiedname" : "dart.core.Duration.inMinutes"
        "comment" : "<p>This <code>Duration</code> in minutes. Incomplete minutes are discarded.</p> <p>The returned value can be greater than 59.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "inSeconds" : 
        "name" : "inSeconds"
        "qualifiedname" : "dart.core.Duration.inSeconds"
        "comment" : "<p>This <code>Duration</code> in seconds. Incomplete seconds are discarded.</p> <p>The returned value can be greater than 59.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "inMilliseconds" : 
        "name" : "inMilliseconds"
        "qualifiedname" : "dart.core.Duration.inMilliseconds"
        "comment" : "<p>This <code>Duration</code> in milliseconds. Incomplete milliseconds are discarded.</p> <p>The returned value can be greater than 999.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "inMicroseconds" : 
        "name" : "inMicroseconds"
        "qualifiedname" : "dart.core.Duration.inMicroseconds"
        "comment" : "<p>This <code>Duration</code> in microseconds.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "==" : 
        "name" : "=="
        "qualifiedname" : "dart.core.Duration.=="
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.==#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "hashCode" : 
        "name" : "hashCode"
        "qualifiedname" : "dart.core.Duration.hashCode"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "compareTo" : 
        "name" : "compareTo"
        "qualifiedname" : "dart.core.Duration.compareTo"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Duration.compareTo#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.Duration.toString"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
  "double" : 
    "name" : "double"
    "qualifiedname" : "dart.core.double"
    "comment" : "<p>Representation of Dart doubles containing double specific constants and operations and specializations of operations inherited from <code>num</code>.</p> <p>The <code>double</code> type is contagious. Operations on <code>double</code>s return <code>double</code> results.</p>"
    "superclass" : "dart.core.num"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "NAN" : 
        "name" : "NAN"
        "qualifiedname" : "dart.core.double.NAN"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.double"
      "INFINITY" : 
        "name" : "INFINITY"
        "qualifiedname" : "dart.core.double.INFINITY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.double"
      "NEGATIVE_INFINITY" : 
        "name" : "NEGATIVE_INFINITY"
        "qualifiedname" : "dart.core.double.NEGATIVE_INFINITY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.double"
      "MIN_POSITIVE" : 
        "name" : "MIN_POSITIVE"
        "qualifiedname" : "dart.core.double.MIN_POSITIVE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.double"
      "MAX_FINITE" : 
        "name" : "MAX_FINITE"
        "qualifiedname" : "dart.core.double.MAX_FINITE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.double"
    "methods" : 
      "remainder" : 
        "name" : "remainder"
        "qualifiedname" : "dart.core.double.remainder"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.remainder#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "+" : 
        "name" : "+"
        "qualifiedname" : "dart.core.double.+"
        "comment" : "<p>Addition operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.+#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "-" : 
        "name" : "-"
        "qualifiedname" : "dart.core.double.-"
        "comment" : "<p>Subtraction operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.-#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "*" : 
        "name" : "*"
        "qualifiedname" : "dart.core.double.*"
        "comment" : "<p>Multiplication operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.*#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "%" : 
        "name" : "%"
        "qualifiedname" : "dart.core.double.%"
        "comment" : ""
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.%#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "/" : 
        "name" : "/"
        "qualifiedname" : "dart.core.double./"
        "comment" : "<p>Division operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double./#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "~/" : 
        "name" : "~/"
        "qualifiedname" : "dart.core.double.~/"
        "comment" : "<p>Truncating division operator.</p> <p>The result of the truncating division <code>:a ~/ b:</code> is equivalent to <code>:(a / b).truncate():</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.double.~/#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.num"
            "value" : "null"
      "unary-" : 
        "name" : "unary-"
        "qualifiedname" : "dart.core.double.unary-"
        "comment" : "<p>Negate operator.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "abs" : 
        "name" : "abs"
        "qualifiedname" : "dart.core.double.abs"
        "comment" : "<p>Returns the absolute value of this <code>double</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "round" : 
        "name" : "round"
        "qualifiedname" : "dart.core.double.round"
        "comment" : "<p>Returns the integer closest to <code>this</code>.</p> <p>Rounds away from zero when there is no closest integer:  <code>:(3.5).round() == 4:</code> and <code>:(-3.5).round() == -4:</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "floor" : 
        "name" : "floor"
        "qualifiedname" : "dart.core.double.floor"
        "comment" : "<p>Returns the greatest integer no greater than <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "ceil" : 
        "name" : "ceil"
        "qualifiedname" : "dart.core.double.ceil"
        "comment" : "<p>Returns the least integer no smaller than <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "truncate" : 
        "name" : "truncate"
        "qualifiedname" : "dart.core.double.truncate"
        "comment" : "<p>Returns the integer obtained by discarding any fractional digits from <code>this</code>.</p> <p>If <code>this</code> is not finite (<code>NaN</code> or infinity), throws an <code>UnsupportedError</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "roundToDouble" : 
        "name" : "roundToDouble"
        "qualifiedname" : "dart.core.double.roundToDouble"
        "comment" : "<p>Returns the integer value, as a double, closest to <code>this</code>.</p> <p>Rounds away from zero when there is no closest integer:  <code>:(3.5).round() == 4:</code> and <code>:(-3.5).round() == -4:</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "floorToDouble" : 
        "name" : "floorToDouble"
        "qualifiedname" : "dart.core.double.floorToDouble"
        "comment" : "<p>Returns the greatest integer value no greater than <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "ceilToDouble" : 
        "name" : "ceilToDouble"
        "qualifiedname" : "dart.core.double.ceilToDouble"
        "comment" : "<p>Returns the least integer value no smaller than <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "truncateToDouble" : 
        "name" : "truncateToDouble"
        "qualifiedname" : "dart.core.double.truncateToDouble"
        "comment" : "<p>Returns the integer obtained by discarding any fractional digits from <code>this</code>.</p> <p>The result is a double.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.double"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.double.toString"
        "comment" : "<p>Provide a representation of this <code>double</code> value.</p> <p>The representation is a number literal such that the closest double value to the representation's mathematical value is this <code>double</code>.</p> <p>Returns \"NaN\" for the Not-a-Number value. Returns \"Infinity\" and \"-Infinity\" for positive and negative Infinity. Returns \"-0.0\" for negative zero.</p> <p>It should always be the case that if <code>:d:</code> is a <code>double</code>, then <code>:d == double.parse(d.toString()):</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "parse" : 
        "name" : "parse"
        "qualifiedname" : "dart.core.double.parse"
        "comment" : "<p>Parse <code>source</code> as an double literal and return its value.</p> <p>Accepts an optional sign (<code>+</code> or <code>-</code>) followed by either the characters \"Infinity\", the characters \"NaN\" or a floating-point representation. A floating-point representation is composed of a mantissa and an optional exponent part. The mantissa is either a decimal point (<code>.</code>) followed by a sequence of (decimal) digits, or a sequence of digits optionally followed by a decimal point and optionally more digits. The (optional) exponent part consists of the character \"e\" or \"E\", an optional sign, and one or more digits.</p> <p>The input string is trimmed (see <code>String.trim</code>) before conversion.</p> <p>If the <code>source</code> is not a valid double literal, the <code>handleError</code> is called with the <code>source</code> as argument, and its return value is used instead. If no handleError is provided, a <code>FormatException</code> is thrown.</p> <p>The <code>onError</code> function is only invoked if <code>source</code> is a <code>String</code>. It is not invoked if the <code>source</code> is, for example, <code>null</code>.</p> <p>Examples of accepted strings:</p> <pre><code>\"3.14\" \"  3.14 \\xA0\" \"0.\" \".0\" \"-1.e3\" \"1234E+7\" \"+.12e-9\" \"-NaN\" </code></pre>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.double"
        "parameters" : 
          "source" : 
            "name" : "source"
            "qualifiedname" : "dart.core.double.parse#source"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "handleError" : 
            "name" : "handleError"
            "qualifiedname" : "dart.core.double.parse#handleError"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
  "DateTime" : 
    "name" : "DateTime"
    "qualifiedname" : "dart.core.DateTime"
    "comment" : "<p>A DateTime object represents a point in time.</p> <p>It can represent time values that are at a distance of at most 8,640,000,000,000,000ms (100,000,000 days) from epoch (1970-01-01 UTC). In other words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].</p> <p>Also see <code>Stopwatch</code> for means to measure time-spans.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
      - "dart.core.Comparable"
    "variables" : 
      "MONDAY" : 
        "name" : "MONDAY"
        "qualifiedname" : "dart.core.DateTime.MONDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "TUESDAY" : 
        "name" : "TUESDAY"
        "qualifiedname" : "dart.core.DateTime.TUESDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "WEDNESDAY" : 
        "name" : "WEDNESDAY"
        "qualifiedname" : "dart.core.DateTime.WEDNESDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "THURSDAY" : 
        "name" : "THURSDAY"
        "qualifiedname" : "dart.core.DateTime.THURSDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "FRIDAY" : 
        "name" : "FRIDAY"
        "qualifiedname" : "dart.core.DateTime.FRIDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SATURDAY" : 
        "name" : "SATURDAY"
        "qualifiedname" : "dart.core.DateTime.SATURDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SUNDAY" : 
        "name" : "SUNDAY"
        "qualifiedname" : "dart.core.DateTime.SUNDAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "DAYS_PER_WEEK" : 
        "name" : "DAYS_PER_WEEK"
        "qualifiedname" : "dart.core.DateTime.DAYS_PER_WEEK"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "JANUARY" : 
        "name" : "JANUARY"
        "qualifiedname" : "dart.core.DateTime.JANUARY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "FEBRUARY" : 
        "name" : "FEBRUARY"
        "qualifiedname" : "dart.core.DateTime.FEBRUARY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MARCH" : 
        "name" : "MARCH"
        "qualifiedname" : "dart.core.DateTime.MARCH"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "APRIL" : 
        "name" : "APRIL"
        "qualifiedname" : "dart.core.DateTime.APRIL"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MAY" : 
        "name" : "MAY"
        "qualifiedname" : "dart.core.DateTime.MAY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "JUNE" : 
        "name" : "JUNE"
        "qualifiedname" : "dart.core.DateTime.JUNE"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "JULY" : 
        "name" : "JULY"
        "qualifiedname" : "dart.core.DateTime.JULY"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "AUGUST" : 
        "name" : "AUGUST"
        "qualifiedname" : "dart.core.DateTime.AUGUST"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "SEPTEMBER" : 
        "name" : "SEPTEMBER"
        "qualifiedname" : "dart.core.DateTime.SEPTEMBER"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "OCTOBER" : 
        "name" : "OCTOBER"
        "qualifiedname" : "dart.core.DateTime.OCTOBER"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "NOVEMBER" : 
        "name" : "NOVEMBER"
        "qualifiedname" : "dart.core.DateTime.NOVEMBER"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "DECEMBER" : 
        "name" : "DECEMBER"
        "qualifiedname" : "dart.core.DateTime.DECEMBER"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "MONTHS_PER_YEAR" : 
        "name" : "MONTHS_PER_YEAR"
        "qualifiedname" : "dart.core.DateTime.MONTHS_PER_YEAR"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
      "millisecondsSinceEpoch" : 
        "name" : "millisecondsSinceEpoch"
        "qualifiedname" : "dart.core.DateTime.millisecondsSinceEpoch"
        "comment" : "<p>The milliseconds since 1970-01-01T00:00:00Z (UTC). This value is independent of the time zone.</p> <p>See <code>Stopwatch</code> for means to measure time-spans.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.int"
      "isUtc" : 
        "name" : "isUtc"
        "qualifiedname" : "dart.core.DateTime.isUtc"
        "comment" : "<p>True if this <code>DateTime</code> is set to UTC time.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.bool"
      "_MAX_MILLISECONDS_SINCE_EPOCH" : 
        "name" : "_MAX_MILLISECONDS_SINCE_EPOCH"
        "qualifiedname" : "dart.core.DateTime._MAX_MILLISECONDS_SINCE_EPOCH"
        "comment" : ""
        "final" : "false"
        "static" : "true"
        "type" : "dart.core.int"
    "methods" : 
      "DateTime" : 
        "name" : "DateTime"
        "qualifiedname" : "dart.core.DateTime.DateTime"
        "comment" : "<p>Constructs a <code>DateTime</code> instance based on the individual parts. The date is in the local time zone.</p> <p><code>month</code> and <code>day</code> are one-based. For example <code>:new DateTime(1938, 1, 10):</code> represents the 10th of January 1938.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
          "year" : 
            "name" : "year"
            "qualifiedname" : "dart.core.DateTime.DateTime#year"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "month" : 
            "name" : "month"
            "qualifiedname" : "dart.core.DateTime.DateTime#month"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "1"
          "day" : 
            "name" : "day"
            "qualifiedname" : "dart.core.DateTime.DateTime#day"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "1"
          "hour" : 
            "name" : "hour"
            "qualifiedname" : "dart.core.DateTime.DateTime#hour"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "minute" : 
            "name" : "minute"
            "qualifiedname" : "dart.core.DateTime.DateTime#minute"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "second" : 
            "name" : "second"
            "qualifiedname" : "dart.core.DateTime.DateTime#second"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "millisecond" : 
            "name" : "millisecond"
            "qualifiedname" : "dart.core.DateTime.DateTime#millisecond"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "DateTime.utc" : 
        "name" : "DateTime.utc"
        "qualifiedname" : "dart.core.DateTime.DateTime.utc"
        "comment" : "<p>Constructs a <code>DateTime</code> instance based on the individual parts. The date is in the UTC time zone.</p> <p><code>month</code> and <code>day</code> are one-based. For example <code>:new DateTime.utc(1938, 1, 10):</code> represents the 10th of January 1938 in Coordinated Universal Time.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
          "year" : 
            "name" : "year"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#year"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "month" : 
            "name" : "month"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#month"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "1"
          "day" : 
            "name" : "day"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#day"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "1"
          "hour" : 
            "name" : "hour"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#hour"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "minute" : 
            "name" : "minute"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#minute"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "second" : 
            "name" : "second"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#second"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
          "millisecond" : 
            "name" : "millisecond"
            "qualifiedname" : "dart.core.DateTime.DateTime.utc#millisecond"
            "optional" : "true"
            "named" : "false"
            "default" : "true"
            "type" : "dart.core.int"
            "value" : "0"
      "DateTime.now" : 
        "name" : "DateTime.now"
        "qualifiedname" : "dart.core.DateTime.DateTime.now"
        "comment" : "<p>Constructs a new <code>DateTime</code> instance with current date time value in the local time zone.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
      "parse" : 
        "name" : "parse"
        "qualifiedname" : "dart.core.DateTime.parse"
        "comment" : "<p>Constructs a new <code>DateTime</code> instance based on <code>formattedString</code>.</p> <p>The function parses a subset of ISO 8601. Examples of accepted strings:</p><ul><li><code>\"2012-02-27 13:27:00\"</code></li><li><code>\"2012-02-27 13:27:00.123456z\"</code></li><li><code>\"20120227 13:27:00\"</code></li><li><code>\"20120227T132700\"</code></li><li><code>\"20120227\"</code></li><li><code>\"+20120227\"</code></li><li><code>\"2012-02-27T14Z\"</code></li><li><code>\"-123450101 00:00:00 Z\"</code>: in the year -12345.</li></ul>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.DateTime"
        "parameters" : 
          "formattedString" : 
            "name" : "formattedString"
            "qualifiedname" : "dart.core.DateTime.parse#formattedString"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "DateTime.fromMillisecondsSinceEpoch" : 
        "name" : "DateTime.fromMillisecondsSinceEpoch"
        "qualifiedname" : "dart.core.DateTime.DateTime.fromMillisecondsSinceEpoch"
        "comment" : "<p>Constructs a new <code>DateTime</code> instance with the given <code>millisecondsSinceEpoch</code>. If <code>isUtc</code> is false then the date is in the local time zone.</p> <p>The constructed <code>DateTime</code> represents 1970-01-01T00:00:00Z + <code>millisecondsSinceEpoch</code>ms in the given time zone (local or UTC).</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "millisecondsSinceEpoch" : 
            "name" : "millisecondsSinceEpoch"
            "qualifiedname" : "dart.core.DateTime.DateTime.fromMillisecondsSinceEpoch#millisecondsSinceEpoch"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "isUtc" : 
            "name" : "isUtc"
            "qualifiedname" : "dart.core.DateTime.DateTime.fromMillisecondsSinceEpoch#isUtc"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
      "==" : 
        "name" : "=="
        "qualifiedname" : "dart.core.DateTime.=="
        "comment" : "<p>Returns true if <code>other</code> is a <code>DateTime</code> at the same moment and in the same timezone (UTC or local).</p> <p>See <code>isAtSameMomentAs</code> for a comparison that ignores the timezone.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.==#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
      "isBefore" : 
        "name" : "isBefore"
        "qualifiedname" : "dart.core.DateTime.isBefore"
        "comment" : "<p>Returns true if <code>this</code> occurs before <code>other</code>. The comparison is independent of whether the time is in UTC or in the local time zone.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.isBefore#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.DateTime"
            "value" : "null"
      "isAfter" : 
        "name" : "isAfter"
        "qualifiedname" : "dart.core.DateTime.isAfter"
        "comment" : "<p>Returns true if <code>this</code> occurs after <code>other</code>. The comparison is independent of whether the time is in UTC or in the local time zone.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.isAfter#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.DateTime"
            "value" : "null"
      "isAtSameMomentAs" : 
        "name" : "isAtSameMomentAs"
        "qualifiedname" : "dart.core.DateTime.isAtSameMomentAs"
        "comment" : "<p>Returns true if <code>this</code> occurs at the same moment as <code>other</code>. The comparison is independent of whether the time is in UTC or in the local time zone.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.isAtSameMomentAs#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.DateTime"
            "value" : "null"
      "compareTo" : 
        "name" : "compareTo"
        "qualifiedname" : "dart.core.DateTime.compareTo"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.compareTo#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.DateTime"
            "value" : "null"
      "hashCode" : 
        "name" : "hashCode"
        "qualifiedname" : "dart.core.DateTime.hashCode"
        "comment" : ""
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "toLocal" : 
        "name" : "toLocal"
        "qualifiedname" : "dart.core.DateTime.toLocal"
        "comment" : "<p>Returns <code>this</code> in the local time zone. Returns itself if it is already in the local time zone. Otherwise, this method is equivalent to</p> <pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,                                         isUtc: false) </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
      "toUtc" : 
        "name" : "toUtc"
        "qualifiedname" : "dart.core.DateTime.toUtc"
        "comment" : "<p>Returns <code>this</code> in UTC. Returns itself if it is already in UTC. Otherwise, this method is equivalent to</p> <pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,                                         isUtc: true) </code></pre>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
      "toString" : 
        "name" : "toString"
        "qualifiedname" : "dart.core.DateTime.toString"
        "comment" : "<p>Returns a human readable string for this instance. The returned string is constructed for the time zone of this instance.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "add" : 
        "name" : "add"
        "qualifiedname" : "dart.core.DateTime.add"
        "comment" : "<p>Returns a new <code>DateTime</code> with the <code>duration</code> added to <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
          "duration" : 
            "name" : "duration"
            "qualifiedname" : "dart.core.DateTime.add#duration"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "subtract" : 
        "name" : "subtract"
        "qualifiedname" : "dart.core.DateTime.subtract"
        "comment" : "<p>Returns a new <code>DateTime</code> with the <code>duration</code> subtracted from <code>this</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.DateTime"
        "parameters" : 
          "duration" : 
            "name" : "duration"
            "qualifiedname" : "dart.core.DateTime.subtract#duration"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Duration"
            "value" : "null"
      "difference" : 
        "name" : "difference"
        "qualifiedname" : "dart.core.DateTime.difference"
        "comment" : "<p>Returns a <code>Duration</code> with the difference of <code>this</code> and <code>other</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.DateTime.difference#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.DateTime"
            "value" : "null"
      "DateTime._internal" : 
        "name" : "DateTime._internal"
        "qualifiedname" : "dart.core.DateTime.DateTime._internal"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "year" : 
            "name" : "year"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#year"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "month" : 
            "name" : "month"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#month"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "day" : 
            "name" : "day"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#day"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "hour" : 
            "name" : "hour"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#hour"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "minute" : 
            "name" : "minute"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#minute"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "second" : 
            "name" : "second"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#second"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "millisecond" : 
            "name" : "millisecond"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#millisecond"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "isUtc" : 
            "name" : "isUtc"
            "qualifiedname" : "dart.core.DateTime.DateTime._internal#isUtc"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.bool"
            "value" : "null"
      "DateTime._now" : 
        "name" : "DateTime._now"
        "qualifiedname" : "dart.core.DateTime.DateTime._now"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "_brokenDownDateToMillisecondsSinceEpoch" : 
        "name" : "_brokenDownDateToMillisecondsSinceEpoch"
        "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch"
        "comment" : ""
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
          "year" : 
            "name" : "year"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#year"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "month" : 
            "name" : "month"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#month"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "day" : 
            "name" : "day"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#day"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "hour" : 
            "name" : "hour"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#hour"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "minute" : 
            "name" : "minute"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#minute"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "second" : 
            "name" : "second"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#second"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "millisecond" : 
            "name" : "millisecond"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#millisecond"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.int"
            "value" : "null"
          "isUtc" : 
            "name" : "isUtc"
            "qualifiedname" : "dart.core.DateTime._brokenDownDateToMillisecondsSinceEpoch#isUtc"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.bool"
            "value" : "null"
      "timeZoneName" : 
        "name" : "timeZoneName"
        "qualifiedname" : "dart.core.DateTime.timeZoneName"
        "comment" : "<p>Returns the abbreviated time-zone name.</p> <p>Examples: <code>:\"CET\":</code> or <code>:\"CEST\":</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "timeZoneOffset" : 
        "name" : "timeZoneOffset"
        "qualifiedname" : "dart.core.DateTime.timeZoneOffset"
        "comment" : "<p>The time-zone offset is the difference between local time and UTC. That is, the offset is positive for time zones west of UTC.</p> <p>Note, that JavaScript, Python and C return the difference between UTC and local time. Java, C# and Ruby return the difference between local time and UTC.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Duration"
        "parameters" : 
      "year" : 
        "name" : "year"
        "qualifiedname" : "dart.core.DateTime.year"
        "comment" : "<p>Returns the year.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "month" : 
        "name" : "month"
        "qualifiedname" : "dart.core.DateTime.month"
        "comment" : "<p>Returns the month into the year <code>1..12</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "day" : 
        "name" : "day"
        "qualifiedname" : "dart.core.DateTime.day"
        "comment" : "<p>Returns the day into the month <code>1..31</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "hour" : 
        "name" : "hour"
        "qualifiedname" : "dart.core.DateTime.hour"
        "comment" : "<p>Returns the hour into the day <code>0..23</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "minute" : 
        "name" : "minute"
        "qualifiedname" : "dart.core.DateTime.minute"
        "comment" : "<p>Returns the minute into the hour <code>0...59</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "second" : 
        "name" : "second"
        "qualifiedname" : "dart.core.DateTime.second"
        "comment" : "<p>Returns the second into the minute <code>0...59</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "millisecond" : 
        "name" : "millisecond"
        "qualifiedname" : "dart.core.DateTime.millisecond"
        "comment" : "<p>Returns the millisecond into the second <code>0...999</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
      "weekday" : 
        "name" : "weekday"
        "qualifiedname" : "dart.core.DateTime.weekday"
        "comment" : "<p>Returns the week day <code>MON..SUN</code>. In accordance with ISO 8601 a week starts with Monday which has the value 1.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
  "Comparable" : 
    "name" : "Comparable"
    "qualifiedname" : "dart.core.Comparable"
    "comment" : "<p>Interface used by types that have an intrinsic ordering.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "compareTo" : 
        "name" : "compareTo"
        "qualifiedname" : "dart.core.Comparable.compareTo"
        "comment" : "<p>Compares this object to another <code>Comparable</code></p> <p>Returns a value like a <code>Comparator</code> when comparing <code>:this:</code> to <code>other</code>.</p> <p>May throw an <code>ArgumentError</code> if <code>other</code> is of a type that is not comparable to <code>:this:</code>.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.int"
        "parameters" : 
          "other" : 
            "name" : "other"
            "qualifiedname" : "dart.core.Comparable.compareTo#other"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Comparable.T"
            "value" : "null"
      "compare" : 
        "name" : "compare"
        "qualifiedname" : "dart.core.Comparable.compare"
        "comment" : "<p>Compare one comparable to another.</p> <p>This utility function is used as the default comparator for the <code>List</code> sort function.</p>"
        "type" : "method"
        "static" : "true"
        "return" : "dart.core.int"
        "parameters" : 
          "a" : 
            "name" : "a"
            "qualifiedname" : "dart.core.Comparable.compare#a"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Comparable"
            "value" : "null"
          "b" : 
            "name" : "b"
            "qualifiedname" : "dart.core.Comparable.compare#b"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Comparable"
            "value" : "null"
  "Comparator" : 
    "name" : "Comparator"
    "qualifiedname" : "dart.core.Comparator"
    "comment" : "<p>The signature of a generic comparison function.</p> <p>A comparison function represents an ordering on a type of objects. A total ordering on a type means that for two values, either they are equal or one is greater than the other (and the latter must then be smaller than the former).</p> <p>A <code>Comparator</code> function represents such a total ordering by returning</p><ul><li>a negative integer if <code>a</code> is smaller than <code>b</code>,</li><li>zero if <code>a</code> is equal to <code>b</code>, and</li><li>a positive integer if <code>a</code> is greater than <code>b</code>.</li></ul>"
    "superclass" : ""
    "abstract" : "false"
    "typedef" : "true"
    "implements" : 
    "variables" : 
    "methods" : 
  "bool" : 
    "name" : "bool"
    "qualifiedname" : "dart.core.bool"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "bool._uninstantiable" : 
        "name" : "bool._uninstantiable"
        "qualifiedname" : "dart.core.bool.bool._uninstantiable"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dart.core.bool"
        "parameters" : 
