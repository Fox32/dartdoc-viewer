"name" : "_foreign_helper"
"comment" : ""
"variables" : 
"functions" : 
  "JS_GLOBAL_OBJECT" : 
    "name" : "JS_GLOBAL_OBJECT"
    "qualifiedname" : "_foreign_helper.JS_GLOBAL_OBJECT"
    "comment" : "<p>Returns the global object, usually called encoded as <code>: $ :</code>.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
  "JS_FUNCTION_TYPE_NAMED_PARAMETERS_TAG" : 
    "name" : "JS_FUNCTION_TYPE_NAMED_PARAMETERS_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_NAMED_PARAMETERS_TAG"
    "comment" : "<p>Returns the name used to tag named parameters in function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_TYPE_OPTIONAL_PARAMETERS_TAG" : 
    "name" : "JS_FUNCTION_TYPE_OPTIONAL_PARAMETERS_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_OPTIONAL_PARAMETERS_TAG"
    "comment" : "<p>Returns the name used to tag optional parameters in function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_TYPE_REQUIRED_PARAMETERS_TAG" : 
    "name" : "JS_FUNCTION_TYPE_REQUIRED_PARAMETERS_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_REQUIRED_PARAMETERS_TAG"
    "comment" : "<p>Returns the name used to tag required parameters in function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_TYPE_RETURN_TYPE_TAG" : 
    "name" : "JS_FUNCTION_TYPE_RETURN_TYPE_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_RETURN_TYPE_TAG"
    "comment" : "<p>Returns the name used to tag return types in function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_TYPE_VOID_RETURN_TAG" : 
    "name" : "JS_FUNCTION_TYPE_VOID_RETURN_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_VOID_RETURN_TAG"
    "comment" : "<p>Returns the name used to tag void return in function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_TYPE_TAG" : 
    "name" : "JS_FUNCTION_TYPE_TAG"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_TYPE_TAG"
    "comment" : "<p>Returns the name used to tag function type representations in JavaScript.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_SIGNATURE_NAME" : 
    "name" : "JS_SIGNATURE_NAME"
    "qualifiedname" : "_foreign_helper.JS_SIGNATURE_NAME"
    "comment" : "<p>Returns the name used for generated function types on classes and methods.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_CURRENT_ISOLATE" : 
    "name" : "JS_CURRENT_ISOLATE"
    "qualifiedname" : "_foreign_helper.JS_CURRENT_ISOLATE"
    "comment" : "<p>Returns the object corresponding to Namer.CURRENT_ISOLATE.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
  "JS_IS_INDEXABLE_FIELD_NAME" : 
    "name" : "JS_IS_INDEXABLE_FIELD_NAME"
    "qualifiedname" : "_foreign_helper.JS_IS_INDEXABLE_FIELD_NAME"
    "comment" : "<p>Returns the field name used for determining if an object or its interceptor has JavaScript indexing behavior.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_FUNCTION_CLASS_NAME" : 
    "name" : "JS_FUNCTION_CLASS_NAME"
    "qualifiedname" : "_foreign_helper.JS_FUNCTION_CLASS_NAME"
    "comment" : "<p>Returns the name of the class <code>Function</code> in the generated code.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_OBJECT_CLASS_NAME" : 
    "name" : "JS_OBJECT_CLASS_NAME"
    "qualifiedname" : "_foreign_helper.JS_OBJECT_CLASS_NAME"
    "comment" : "<p>Returns the name of the class <code>Object</code> in the generated code.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_OPERATOR_AS_PREFIX" : 
    "name" : "JS_OPERATOR_AS_PREFIX"
    "qualifiedname" : "_foreign_helper.JS_OPERATOR_AS_PREFIX"
    "comment" : "<p>Returns the prefix used for generated type argument substitutions on classes.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_OPERATOR_IS_PREFIX" : 
    "name" : "JS_OPERATOR_IS_PREFIX"
    "qualifiedname" : "_foreign_helper.JS_OPERATOR_IS_PREFIX"
    "comment" : "<p>Returns the prefix used for generated is checks on classes.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dart.core.String"
    "parameters" : 
  "JS_DART_OBJECT_CONSTRUCTOR" : 
    "name" : "JS_DART_OBJECT_CONSTRUCTOR"
    "qualifiedname" : "_foreign_helper.JS_DART_OBJECT_CONSTRUCTOR"
    "comment" : "<p>Returns the JavaScript constructor function for Dart's Object class. This can be used for type tests, as in</p> <pre><code>if (JS('bool', '# instanceof #', obj, JS_DART_OBJECT_CONSTRUCTOR()))   ... </code></pre>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
  "JS_CREATE_ISOLATE" : 
    "name" : "JS_CREATE_ISOLATE"
    "qualifiedname" : "_foreign_helper.JS_CREATE_ISOLATE"
    "comment" : "<p>Creates an isolate and returns it.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
  "JS_SET_CURRENT_ISOLATE" : 
    "name" : "JS_SET_CURRENT_ISOLATE"
    "qualifiedname" : "_foreign_helper.JS_SET_CURRENT_ISOLATE"
    "comment" : "<p>Sets the current isolate to <code>isolate</code>.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "void"
    "parameters" : 
      "isolate" : 
        "name" : "isolate"
        "qualifiedname" : "_foreign_helper.JS_SET_CURRENT_ISOLATE#isolate"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
  "RAW_DART_FUNCTION_REF" : 
    "name" : "RAW_DART_FUNCTION_REF"
    "qualifiedname" : "_foreign_helper.RAW_DART_FUNCTION_REF"
    "comment" : "<p>Returns a raw reference to the JavaScript function which implements <code>function</code>.</p> <p>Warning: this is dangerous, you should probably use [DART_CLOSURE_TO_JS] instead. The returned object is not a valid Dart closure, does not store the isolate context or arity.</p> <p>A valid example of where this can be used is as the second argument to V8's Error.captureStackTrace. See https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
      "function" : 
        "name" : "function"
        "qualifiedname" : "_foreign_helper.RAW_DART_FUNCTION_REF#function"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Function"
        "value" : "null"
  "DART_CLOSURE_TO_JS" : 
    "name" : "DART_CLOSURE_TO_JS"
    "qualifiedname" : "_foreign_helper.DART_CLOSURE_TO_JS"
    "comment" : "<p>Converts the Dart closure <code>function</code> into a JavaScript closure.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
      "function" : 
        "name" : "function"
        "qualifiedname" : "_foreign_helper.DART_CLOSURE_TO_JS#function"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Function"
        "value" : "null"
  "JS_CALL_IN_ISOLATE" : 
    "name" : "JS_CALL_IN_ISOLATE"
    "qualifiedname" : "_foreign_helper.JS_CALL_IN_ISOLATE"
    "comment" : "<p>Invokes <code>function</code> in the context of <code>isolate</code>.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
      "isolate" : 
        "name" : "isolate"
        "qualifiedname" : "_foreign_helper.JS_CALL_IN_ISOLATE#isolate"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "function" : 
        "name" : "function"
        "qualifiedname" : "_foreign_helper.JS_CALL_IN_ISOLATE#function"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.Function"
        "value" : "null"
  "JS_CURRENT_ISOLATE_CONTEXT" : 
    "name" : "JS_CURRENT_ISOLATE_CONTEXT"
    "qualifiedname" : "_foreign_helper.JS_CURRENT_ISOLATE_CONTEXT"
    "comment" : "<p>Returns the isolate in which this code is running.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "_foreign_helper.IsolateContext"
    "parameters" : 
  "JS" : 
    "name" : "JS"
    "qualifiedname" : "_foreign_helper.JS"
    "comment" : "<p>Emits a JavaScript code fragment parameterized by arguments.</p> <p>Hash characters <code>#</code> in the <code>codeTemplate</code> are replaced in left-to-right order with expressions that contain the values of, or evaluate to, the arguments. The number of hash marks must match the number or arguments.  Although declared with arguments <code>arg0</code> through <code>arg2</code>, the form actually has no limit on the number of arguments.</p> <p>The <code>typeDescription</code> argument is interpreted as a description of the behavior of the JavaScript code.  Currently it describes the types that may be returned by the expression, with the additional behavior that the returned values may be fresh instances of the types.  The type information must be correct as it is trusted by the compiler in optimizations, and it must be precise as possible since it is used for native live type analysis to tree-shake large parts of the DOM libraries.  If poorly written, the <code>typeDescription</code> will cause unnecessarily bloated programs.  (You can check for this by compiling with <code>--verbose</code>; there is an info message describing the number of native (DOM) types that can be removed, which usually should be greater than zero.)</p> <p>The <code>typeDescription</code> is a <code>String</code> which contains a union of types separated by vertical bar <code>|</code> symbols, e.g.  <code>\"num|String\"</code> describes the union of numbers and Strings.  There is no type in Dart that is this precise.  The Dart alternative would be <code>Object</code> or <code>dynamic</code>, but these types imply that the JS-code might also be creating instances of all the DOM types.  If <code>null</code> is possible, it must be specified explicitly, e.g. <code>\"String|Null\"</code>. <code>typeDescription</code> has several extensions to help describe the behavior more accurately.  In addition to the union type already described:</p><ul><li> <p><code>=Object</code> is a plain JavaScript object.  Some DOM methods return instances that have no corresponing Dart type (e.g. cross-frame documents), <code>=Object</code> can be used to describe these untyped' values.</p></li><li> <p><code>var</code>.  If the entire <code>typeDescription</code> is <code>var</code> then the type is    <code>dynamic</code> but the code is known to not create any instances.</p></li></ul> <p>Examples:</p> <pre><code>// Parent window might be an opaque cross-frame window. var thing = JS('=Object|Window', '#.parent', myWindow); </code></pre> <p>Guidelines:</p><ul><li> <p>Do not use any parameter, local, method or field names in the    <code>codeTemplate</code>.  These names are all subject to arbitrary renaming by the    compiler.  Pass the values in via <code>#</code> substition, and test with the    <code>--minify</code> dart2js command-line option.</p></li><li> <p>The substituted expressions are values, not locations.</p> <p>   JS('void', '# += \"x\"', this.field);</p></li></ul> <p>   <code>this.field</code> might not be a substituted as a reference to the field.  The    generated code might accidentally work as intended, but it also might be</p> <pre><code>   var t1 = this.field;    t1 += \"x\"; </code></pre> <p>   or</p> <pre><code>   this.get$field() += \"x\"; </code></pre> <p>   The remedy in this case is to expand the <code>+=</code> operator, leaving all    references to the Dart field as Dart code:</p> <pre><code>   this.field = JS('String', '# + \"x\"', this.field); </code></pre> <p>Additional notes.</p> <p>In the future we may extend <code>typeDescription</code> to include other aspects of the behavior, for example, separating the returned types from the instantiated types, or including effects to allow the compiler to perform more optimizations around the code.  This might be an extension of <code>JS</code> or a new function similar to <code>JS</code> with additional arguments for the new information.</p>"
    "type" : "method"
    "static" : "false"
    "return" : "dynamic"
    "parameters" : 
      "typeDescription" : 
        "name" : "typeDescription"
        "qualifiedname" : "_foreign_helper.JS#typeDescription"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.String"
        "value" : "null"
      "codeTemplate" : 
        "name" : "codeTemplate"
        "qualifiedname" : "_foreign_helper.JS#codeTemplate"
        "optional" : "false"
        "named" : "false"
        "default" : "false"
        "type" : "dart.core.String"
        "value" : "null"
      "arg0" : 
        "name" : "arg0"
        "qualifiedname" : "_foreign_helper.JS#arg0"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg1" : 
        "name" : "arg1"
        "qualifiedname" : "_foreign_helper.JS#arg1"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg2" : 
        "name" : "arg2"
        "qualifiedname" : "_foreign_helper.JS#arg2"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg3" : 
        "name" : "arg3"
        "qualifiedname" : "_foreign_helper.JS#arg3"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg4" : 
        "name" : "arg4"
        "qualifiedname" : "_foreign_helper.JS#arg4"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg5" : 
        "name" : "arg5"
        "qualifiedname" : "_foreign_helper.JS#arg5"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg6" : 
        "name" : "arg6"
        "qualifiedname" : "_foreign_helper.JS#arg6"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg7" : 
        "name" : "arg7"
        "qualifiedname" : "_foreign_helper.JS#arg7"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg8" : 
        "name" : "arg8"
        "qualifiedname" : "_foreign_helper.JS#arg8"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg9" : 
        "name" : "arg9"
        "qualifiedname" : "_foreign_helper.JS#arg9"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg10" : 
        "name" : "arg10"
        "qualifiedname" : "_foreign_helper.JS#arg10"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
      "arg11" : 
        "name" : "arg11"
        "qualifiedname" : "_foreign_helper.JS#arg11"
        "optional" : "true"
        "named" : "false"
        "default" : "false"
        "type" : "dynamic"
        "value" : "null"
"classes" : 
  "IsolateContext" : 
    "name" : "IsolateContext"
    "qualifiedname" : "_foreign_helper.IsolateContext"
    "comment" : ""
    "superclass" : "dart.core.Object"
    "abstract" : "true"
    "typedef" : "false"
    "implements" : 
    "variables" : 
    "methods" : 
      "isolateStatics" : 
        "name" : "isolateStatics"
        "qualifiedname" : "_foreign_helper.IsolateContext.isolateStatics"
        "comment" : "<p>Holds a (native) JavaScript instance of Isolate, see finishIsolateConstructorFunction in emitter.dart.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
