"name" : "args"
"comment" : "<p>This library lets you define parsers for parsing raw command-line argumentsinto a set of options and values using <a href=\"http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\">GNU</a> and <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\">POSIX</a> style options.</p><h2>Installing</h2><p>Use <a href=\"http://pub.dartlang.org\">pub</a> to install this package. Add the following to your <code>pubspec.yaml</code>file.</p><pre><code>dependencies:  args: any</code></pre><p>Then run <code>pub install</code>.</p><p>For more information, see the<a href=\"http://pub.dartlang.org/packages/args\">args package on pub.dartlang.org</a>.</p><h2>Defining options</h2><p>To use this library, you create an <code>ArgParser</code> object which will containthe set of options you support:</p><pre><code>var parser = new ArgParser();</code></pre><p>Then you define a set of options on that parser using <code>addOption()</code> and<code>addFlag()</code>. The minimal way to create an option is:</p><pre><code>parser.addOption('name');</code></pre><p>This creates an option named \"name\". Options must be given a value on thecommand line. If you have a simple on/off flag, you can instead use:</p><pre><code>parser.addFlag('name');</code></pre><p>Flag options will, by default, accept a 'no-' prefix to negate the option.This can be disabled like so:</p><pre><code>parser.addFlag('name', negatable: false);</code></pre><p>(From here on out \"option\" will refer to both \"regular\" options and flags.In cases where the distinction matters, we'll use \"non-flag option\".)</p><p>Options may have an optional single-character abbreviation:</p><pre><code>parser.addOption('mode', abbr: 'm');parser.addFlag('verbose', abbr: 'v');</code></pre><p>They may also specify a default value. The default value will be used if theoption isn't provided:</p><pre><code>parser.addOption('mode', defaultsTo: 'debug');parser.addFlag('verbose', defaultsTo: false);</code></pre><p>The default value for non-flag options can be any <code>String</code>. For flags, itmust be a <code>bool</code>.</p><p>To validate non-flag options, you may provide an allowed set of values. Whenyou do, it will throw a <code>FormatException</code> when you parse the arguments ifthe value for an option is not in the allowed set:</p><pre><code>parser.addOption('mode', allowed: ['debug', 'release']);</code></pre><p>You can provide a callback when you define an option. When you later parsea set of arguments, the callback for that option will be invoked with thevalue provided for it:</p><pre><code>parser.addOption('mode', callback: (mode) =&gt; print('Got mode $mode));parser.addFlag('verbose', callback: (verbose) {  if (verbose) print('Verbose');});</code></pre><p>The callback for each option will <em>always</em> be called when you parse a set ofarguments. If the option isn't provided in the args, the callback will bepassed the default value, or <code>null</code> if there is none set.</p><h2>Parsing arguments</h2><p>Once you have an <code>ArgParser</code> set up with some options and flags, you use itby calling <code>ArgParser.parse()</code> with a set of arguments:</p><pre><code>var results = parser.parse(['some', 'command', 'line', 'args']);</code></pre><p>These will usually come from <code>new Options().arguments</code>, but you can pass inany list of strings. It returns an instance of <code>ArgResults</code>. This is amap-like object that will return the value of any parsed option.</p><pre><code>var parser = new ArgParser();parser.addOption('mode');parser.addFlag('verbose', defaultsTo: true);var results = parser.parse('['--mode', 'debug', 'something', 'else']);print(results['mode']); // debugprint(results['verbose']); // true</code></pre><p>The <code>parse()</code> method will stop as soon as it reaches <code>--</code> or anything thatit doesn't recognize as an option, flag, or option value. If there are stillarguments left, they will be provided to you in<code>ArgResults.rest</code>.</p><pre><code>print(results.rest); // ['something', 'else']</code></pre><h2>Specifying options</h2><p>To actually pass in options and flags on the command line, use GNU or POSIXstyle. If you define an option like:</p><pre><code>parser.addOption('name', abbr: 'n');</code></pre><p>Then a value for it can be specified on the command line using any of:</p><pre><code>--name=somevalue--name somevalue-nsomevalue-n somevalue</code></pre><p>Given this flag:</p><pre><code>parser.addFlag('name', abbr: 'n');</code></pre><p>You can set it on using one of:</p><pre><code>--name-n</code></pre><p>Or set it off using:</p><pre><code>--no-name</code></pre><p>Multiple flag abbreviation can also be collapsed into a single argument. Ifyou define:</p><pre><code>parser.addFlag('verbose', abbr: 'v');parser.addFlag('french', abbr: 'f');parser.addFlag('iambic-pentameter', abbr: 'i');</code></pre><p>Then all three flags could be set using:</p><pre><code>-vfi</code></pre><p>By default, an option has only a single value, with later option valuesoverriding earlier ones; for example:</p><pre><code>var parser = new ArgParser();parser.addOption('mode');var results = parser.parse(['--mode', 'on', '--mode', 'off']);print(results['mode']); // prints 'off'</code></pre><p>If you need multiple values, set the <code>allowMultiple</code> flag. In thatcase the option can occur multiple times and when parsing arguments aList of values will be returned:</p><pre><code>var parser = new ArgParser();parser.addOption('mode', allowMultiple: true);var results = parser.parse(['--mode', 'on', '--mode', 'off']);print(results['mode']); // prints '[on, off]'</code></pre><h2>Defining commands</h2><p>In addition to <em>options</em>, you can also define <em>commands</em>. A command is anamed argument that has its own set of options. For example, when you run:</p><pre><code>$ git commit -a</code></pre><p>The executable is <code>git</code>, the command is <code>commit</code>, and the <code>-a</code> option is anoption passed to the command. You can add a command like so:</p><pre><code>var parser = new ArgParser();var command = parser.addCommand('commit');</code></pre><p>It returns another <code>ArgParser</code> which you can then use to define optionsspecific to that command. If you already have an <code>ArgParser</code> for thecommand's options, you can pass it to <code>addCommand</code>:</p><pre><code>var parser = new ArgParser();var command = new ArgParser();parser.addCommand('commit', command);</code></pre><p>The <code>ArgParser</code> for a command can then define whatever options or flags:</p><pre><code>command.addFlag('all', abbr: 'a');</code></pre><p>You can add multiple commands to the same parser so that a user can selectone from a range of possible commands. When an argument list is parsed,you can then determine which command was entered and what options wereprovided for it.</p><pre><code>var results = parser.parse(['commit', '-a']);print(results.command.name); // \"commit\"print(results.command['a']); // true</code></pre><p>Options for a command must appear after the command in the argument list.For example, given the above parser, \"git -a commit\" is <em>not</em> valid. Theparser will try to find the right-most command that accepts an option. Forexample:</p><pre><code>var parser = new ArgParser();parser.addFlag('all', abbr: 'a');var command = new ArgParser().addCommand('commit');parser.addFlag('all', abbr: 'a');var results = parser.parse(['commit', '-a']);print(results.command['a']); // true</code></pre><p>Here, both the top-level parser and the \"commit\" command can accept a \"-a\"(which is probably a bad command line interface, admittedly). In that case,when \"-a\" appears after \"commit\", it will be applied to that command. If itappears to the left of \"commit\", it will be given to the top-level parser.</p><h2>Displaying usage</h2><p>This library can also be used to automatically generate nice usage helptext like you get when you run a program with <code>--help</code>. To use this, youwill also want to provide some help text when you create your options. Todefine help text for the entire option, do:</p><pre><code>parser.addOption('mode', help: 'The compiler configuration',    allowed: ['debug', 'release']);parser.addFlag('verbose', help: 'Show additional diagnostic info');</code></pre><p>For non-flag options, you can also provide detailed help for each expectedvalue using a map:</p><pre><code>parser.addOption('arch', help: 'The architecture to compile for',    allowedHelp: {      'ia32': 'Intel x86',      'arm': 'ARM Holding 32-bit chip'    });</code></pre><p>If you define a set of options like the above, then calling this:</p><pre><code>print(parser.getUsage());</code></pre><p>Will display something like:</p><pre><code>--mode            The compiler configuration                  [debug, release]--[no-]verbose    Show additional diagnostic info--arch            The architecture to compile for      [arm]       ARM Holding 32-bit chip      [ia32]      Intel x86</code></pre><p>To assist the formatting of the usage help, single line help text willbe followed by a single new line. Options with multi-line help textwill be followed by two new lines. This provides spatial diversity betweenoptions.</p>"
"variables" : 
"functions" : 
"classes" : 
  "ArgResults" : 
    "name" : "ArgResults"
    "qualifiedname" : "args.ArgResults"
    "comment" : "<p>The results of parsing a series of command line arguments using<code>ArgParser.parse()</code>. Includes the parsed options and any remaining unparsedcommand line arguments.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "_options" : 
        "name" : "_options"
        "qualifiedname" : "args.ArgResults._options"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
      "name" : 
        "name" : "name"
        "qualifiedname" : "args.ArgResults.name"
        "comment" : "<p>If these are the results for parsing a command's options, this will bethe name of the command. For top-level results, this returns <code>null</code>.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "command" : 
        "name" : "command"
        "qualifiedname" : "args.ArgResults.command"
        "comment" : "<p>The command that was selected, or <code>null</code> if none was. This will containthe options that were selected for that command.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "args.ArgResults"
      "rest" : 
        "name" : "rest"
        "qualifiedname" : "args.ArgResults.rest"
        "comment" : "<p>The remaining command-line arguments that were not parsed as options orflags. If <code>--</code> was used to separate the options from the remainingarguments, it will not be included in this list.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.List"
    "methods" : 
      "ArgResults" : 
        "name" : "ArgResults"
        "qualifiedname" : "args.ArgResults.ArgResults"
        "comment" : "<p>Creates a new <code>ArgResults</code>.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "_options" : 
            "name" : "_options"
            "qualifiedname" : "args.ArgResults.ArgResults#_options"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgResults.ArgResults#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "command" : 
            "name" : "command"
            "qualifiedname" : "args.ArgResults.ArgResults#command"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "args.ArgResults"
            "value" : "null"
          "rest" : 
            "name" : "rest"
            "qualifiedname" : "args.ArgResults.ArgResults#rest"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
      "[]" : 
        "name" : "[]"
        "qualifiedname" : "args.ArgResults.[]"
        "comment" : "<p>Gets the parsed command-line option named <code>name</code>.</p>"
        "type" : "operator"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgResults.[]#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "options" : 
        "name" : "options"
        "qualifiedname" : "args.ArgResults.options"
        "comment" : "<p>Get the names of the options as an <code>Iterable</code>.</p>"
        "type" : "getter"
        "static" : "false"
        "return" : "dart.core.Iterable"
        "parameters" : 
  "Option" : 
    "name" : "Option"
    "qualifiedname" : "args.Option"
    "comment" : "<p>A command-line option. Includes both flags and options which take a value.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "name" : 
        "name" : "name"
        "qualifiedname" : "args.Option.name"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "abbreviation" : 
        "name" : "abbreviation"
        "qualifiedname" : "args.Option.abbreviation"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "allowed" : 
        "name" : "allowed"
        "qualifiedname" : "args.Option.allowed"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.List"
      "defaultValue" : 
        "name" : "defaultValue"
        "qualifiedname" : "args.Option.defaultValue"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dynamic"
      "callback" : 
        "name" : "callback"
        "qualifiedname" : "args.Option.callback"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Function"
      "help" : 
        "name" : "help"
        "qualifiedname" : "args.Option.help"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.String"
      "allowedHelp" : 
        "name" : "allowedHelp"
        "qualifiedname" : "args.Option.allowedHelp"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
      "isFlag" : 
        "name" : "isFlag"
        "qualifiedname" : "args.Option.isFlag"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.bool"
      "negatable" : 
        "name" : "negatable"
        "qualifiedname" : "args.Option.negatable"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.bool"
      "allowMultiple" : 
        "name" : "allowMultiple"
        "qualifiedname" : "args.Option.allowMultiple"
        "comment" : ""
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.bool"
      "_invalidChars" : 
        "name" : "_invalidChars"
        "qualifiedname" : "args.Option._invalidChars"
        "comment" : ""
        "final" : "true"
        "static" : "true"
        "type" : "dynamic"
    "methods" : 
      "Option" : 
        "name" : "Option"
        "qualifiedname" : "args.Option.Option"
        "comment" : ""
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.Option.Option#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "abbreviation" : 
            "name" : "abbreviation"
            "qualifiedname" : "args.Option.Option#abbreviation"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "help" : 
            "name" : "help"
            "qualifiedname" : "args.Option.Option#help"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "allowed" : 
            "name" : "allowed"
            "qualifiedname" : "args.Option.Option#allowed"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "allowedHelp" : 
            "name" : "allowedHelp"
            "qualifiedname" : "args.Option.Option#allowedHelp"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "defaultValue" : 
            "name" : "defaultValue"
            "qualifiedname" : "args.Option.Option#defaultValue"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
          "callback" : 
            "name" : "callback"
            "qualifiedname" : "args.Option.Option#callback"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "isFlag" : 
            "name" : "isFlag"
            "qualifiedname" : "args.Option.Option#isFlag"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.bool"
            "value" : "null"
          "negatable" : 
            "name" : "negatable"
            "qualifiedname" : "args.Option.Option#negatable"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.bool"
            "value" : "null"
          "allowMultiple" : 
            "name" : "allowMultiple"
            "qualifiedname" : "args.Option.Option#allowMultiple"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
  "ArgParser" : 
    "name" : "ArgParser"
    "qualifiedname" : "args.ArgParser"
    "comment" : "<p>A class for taking a list of raw command line arguments and parsing outoptions and flags from them.</p>"
    "superclass" : "dart.core.Object"
    "abstract" : "false"
    "typedef" : "false"
    "implements" : 
    "variables" : 
      "options" : 
        "name" : "options"
        "qualifiedname" : "args.ArgParser.options"
        "comment" : "<p>The options that have been defined for this parser.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
      "commands" : 
        "name" : "commands"
        "qualifiedname" : "args.ArgParser.commands"
        "comment" : "<p>The commands that have been defined for this parser.</p>"
        "final" : "true"
        "static" : "false"
        "type" : "dart.core.Map"
    "methods" : 
      "ArgParser" : 
        "name" : "ArgParser"
        "qualifiedname" : "args.ArgParser.ArgParser"
        "comment" : "<p>Creates a new ArgParser.</p>"
        "type" : "constructor"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
      "addCommand" : 
        "name" : "addCommand"
        "qualifiedname" : "args.ArgParser.addCommand"
        "comment" : "<p>Defines a command.</p><p>A command is a named argument which may in turn define its own options andsubcommands using the given parser. If <code>parser</code> is omitted, implicitlycreates a new one. Returns the parser for the command.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "args.ArgParser"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgParser.addCommand#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "parser" : 
            "name" : "parser"
            "qualifiedname" : "args.ArgParser.addCommand#parser"
            "optional" : "true"
            "named" : "false"
            "default" : "false"
            "type" : "args.ArgParser"
            "value" : "null"
      "addFlag" : 
        "name" : "addFlag"
        "qualifiedname" : "args.ArgParser.addFlag"
        "comment" : "<p>Defines a flag. Throws an <code>ArgumentError</code> if:</p><ul><li>There is already an option named <code>name</code>.</li><li>There is already an option using abbreviation <code>abbr</code>.</li></ul>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgParser.addFlag#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "abbr" : 
            "name" : "abbr"
            "qualifiedname" : "args.ArgParser.addFlag#abbr"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "help" : 
            "name" : "help"
            "qualifiedname" : "args.ArgParser.addFlag#help"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "defaultsTo" : 
            "name" : "defaultsTo"
            "qualifiedname" : "args.ArgParser.addFlag#defaultsTo"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
          "negatable" : 
            "name" : "negatable"
            "qualifiedname" : "args.ArgParser.addFlag#negatable"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "true"
          "callback" : 
            "name" : "callback"
            "qualifiedname" : "args.ArgParser.addFlag#callback"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
      "addOption" : 
        "name" : "addOption"
        "qualifiedname" : "args.ArgParser.addOption"
        "comment" : "<p>Defines a value-taking option. Throws an <code>ArgumentError</code> if:</p><ul><li>There is already an option with name <code>name</code>.</li><li>There is already an option using abbreviation <code>abbr</code>.</li></ul>"
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgParser.addOption#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "abbr" : 
            "name" : "abbr"
            "qualifiedname" : "args.ArgParser.addOption#abbr"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "help" : 
            "name" : "help"
            "qualifiedname" : "args.ArgParser.addOption#help"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "allowed" : 
            "name" : "allowed"
            "qualifiedname" : "args.ArgParser.addOption#allowed"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "allowedHelp" : 
            "name" : "allowedHelp"
            "qualifiedname" : "args.ArgParser.addOption#allowedHelp"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "defaultsTo" : 
            "name" : "defaultsTo"
            "qualifiedname" : "args.ArgParser.addOption#defaultsTo"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "callback" : 
            "name" : "callback"
            "qualifiedname" : "args.ArgParser.addOption#callback"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "allowMultiple" : 
            "name" : "allowMultiple"
            "qualifiedname" : "args.ArgParser.addOption#allowMultiple"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
      "_addOption" : 
        "name" : "_addOption"
        "qualifiedname" : "args.ArgParser._addOption"
        "comment" : ""
        "type" : "method"
        "static" : "false"
        "return" : "void"
        "parameters" : 
          "name" : 
            "name" : "name"
            "qualifiedname" : "args.ArgParser._addOption#name"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "abbr" : 
            "name" : "abbr"
            "qualifiedname" : "args.ArgParser._addOption#abbr"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "help" : 
            "name" : "help"
            "qualifiedname" : "args.ArgParser._addOption#help"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
          "allowed" : 
            "name" : "allowed"
            "qualifiedname" : "args.ArgParser._addOption#allowed"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
          "allowedHelp" : 
            "name" : "allowedHelp"
            "qualifiedname" : "args.ArgParser._addOption#allowedHelp"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Map"
            "value" : "null"
          "defaultsTo" : 
            "name" : "defaultsTo"
            "qualifiedname" : "args.ArgParser._addOption#defaultsTo"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dynamic"
            "value" : "null"
          "callback" : 
            "name" : "callback"
            "qualifiedname" : "args.ArgParser._addOption#callback"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.Function"
            "value" : "null"
          "isFlag" : 
            "name" : "isFlag"
            "qualifiedname" : "args.ArgParser._addOption#isFlag"
            "optional" : "true"
            "named" : "true"
            "default" : "false"
            "type" : "dart.core.bool"
            "value" : "null"
          "negatable" : 
            "name" : "negatable"
            "qualifiedname" : "args.ArgParser._addOption#negatable"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
          "allowMultiple" : 
            "name" : "allowMultiple"
            "qualifiedname" : "args.ArgParser._addOption#allowMultiple"
            "optional" : "true"
            "named" : "true"
            "default" : "true"
            "type" : "dart.core.bool"
            "value" : "false"
      "parse" : 
        "name" : "parse"
        "qualifiedname" : "args.ArgParser.parse"
        "comment" : "<p>Parses <code>args</code>, a list of command-line arguments, matches them against theflags and options defined by this parser, and returns the result.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "args.ArgResults"
        "parameters" : 
          "args" : 
            "name" : "args"
            "qualifiedname" : "args.ArgParser.parse#args"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.List"
            "value" : "null"
      "getUsage" : 
        "name" : "getUsage"
        "qualifiedname" : "args.ArgParser.getUsage"
        "comment" : "<p>Generates a string displaying usage information for the defined options.This is basically the help text shown on the command line.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dart.core.String"
        "parameters" : 
      "getDefault" : 
        "name" : "getDefault"
        "qualifiedname" : "args.ArgParser.getDefault"
        "comment" : "<p>Get the default value for an option. Useful after parsing to testif the user specified something other than the default.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "dynamic"
        "parameters" : 
          "option" : 
            "name" : "option"
            "qualifiedname" : "args.ArgParser.getDefault#option"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
      "findByAbbreviation" : 
        "name" : "findByAbbreviation"
        "qualifiedname" : "args.ArgParser.findByAbbreviation"
        "comment" : "<p>Finds the option whose abbreviation is <code>abbr</code>, or <code>null</code> if no option hasthat abbreviation.</p>"
        "type" : "method"
        "static" : "false"
        "return" : "args.Option"
        "parameters" : 
          "abbr" : 
            "name" : "abbr"
            "qualifiedname" : "args.ArgParser.findByAbbreviation#abbr"
            "optional" : "false"
            "named" : "false"
            "default" : "false"
            "type" : "dart.core.String"
            "value" : "null"
