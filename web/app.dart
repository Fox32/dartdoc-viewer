/**
 * This application displays documentation generated by the docgen tool
 * found at dart-repo/dart/pkg/docgen. 
 * 
 * The Yaml file outputted by the docgen tool will be read in to 
 * generate [Page] and [Category] and [CompositeContainer]. 
 * Pages, Categories and CategoryItems are used to format and layout the page.
 */
// TODO(janicejl): Add a link to the dart docgen landing page in future. 
library dartdoc_viewer;

import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:dartdoc_viewer/data.dart';
import 'package:dartdoc_viewer/item.dart';
import 'package:dartdoc_viewer/read_yaml.dart';

// TODO(janicejl): YAML path should not be hardcoded. 
// Path to the YAML file being read in. 
const sourcePath = '../../docs/library_list.txt';

/// The [Viewer] object being displayed.
final Viewer viewer = new Viewer._();

/**
 * The Dartdoc Viewer application state.
 */
class Viewer {

  // The page pathname at first load for navigation.
  String origin;

  /// The homepage from which every [Item] can be reached.
  @observable Item homePage;
  
  /// The current page being shown.
  @observable Item currentPage;

  // Private constructor for singleton instantiation.
  Viewer._() {
    // Upon startup, the url ends with index.html. To allow for HTTP requests
    // from any view, a proper path to the origin is needed, so removing 
    // index.html from the initial url gives a base path for HTTP requests.
    // TODO(tmandel): Find a way to remove 'origin' variable.
    origin = window.location.pathname.replaceAll('index.html', '');
    var manifest = retrieveFileContents(sourcePath);
    manifest.then((response) {
      var libraries = response.split('\n');
      currentPage = new Home(libraries);
      homePage = currentPage;
    });
  }
  
  /// The title of the current page.
  String get title => currentPage == null ? '' : currentPage.decoratedName;
  
  /**
   * Changes the currentPage to the page of the item clicked
   * without pushing state onto the history.
   */
  changePageWithoutState(Item page) {
    if (page != null) {
      currentPage = page;
    }
  }
  
  /// Replaces a [Placeholder] with a [Library] in [homePage]'s content.
  Library _updateContent(String data, Placeholder page) {
    var lib = loadData(data);
    var index = homePage.content.indexOf(page);
    homePage.content.remove(page);
    homePage.content.insert(index, lib);
    buildHierarchy(lib, homePage);
    return lib;
  }
  
  /**
   * Pushes state onto the history before updating the [currentPage].
   */
  changePage(Item page) {
    if (page is Placeholder) {
      var data = page.loadLibrary();
      data.then((response) {
        var lib = _updateContent(response, page);
        changePage(lib);
      });
    } else if (page != null && currentPage != page) {
      var state = page.path;
      var title = 'Dart API Reference';
      var url = origin;
      if (state != '') {
        var title = state.substring(0, state.length - 1);
        url = '$origin#$state';
      } else {
        url = '${origin}index.html';
      }
      // TODO(tmandel): Use package:route for history and URLs.
      window.history.pushState(state, title, url);
    }
    changePageWithoutState(page);
  }
  
  /**
   * Creates a list of [Item] objects from the [path] describing the
   * path to a particular [Item] object.
   */
  List<Item> getBreadcrumbs() {
    // Matches alphanumeric variable/method names ending with a '/'.  
    var regex = new RegExp(r'(_?([a-zA-Z0-9_%]+)=?)/');
    var matches = regex.allMatches(currentPage.path);
    var currentPath = '';
    var breadcrumbs = [homePage];
    matches.forEach((match) {
      currentPath = '$currentPath${match.group(0)}';
      breadcrumbs.add(pageIndex[currentPath]);
    });
    return breadcrumbs;
  }
  
  /// Handles lazy loading of libraries from links not on the homepage.
  void handleLink(LinkableType type) {
    if (type.location != null) {
      changePage(type.location);
    } else {
      homePage.content.forEach((element) {
        if (element is Placeholder) {
          var betterName = libraryNames[element.name];
          if (type.type.startsWith(betterName)) {
            element.loadLibrary().then((response) {
              _updateContent(response, element);
              changePage(type.location);
            });
          }
        }
      });
    }
  }
}

// Handles browser navigation.
main() {
  window.onPopState.listen((event) {
    if (event.state != null) {
      if (event.state != '') {
        viewer.changePageWithoutState(pageIndex[event.state]);
      }
    } else {
      viewer.changePageWithoutState(viewer.homePage);
    }
  });
}