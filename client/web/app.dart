/**
 * This application displays documentation generated by the docgen tool
 * found at dart-repo/dart/pkg/docgen. 
 * 
 * The Yaml file outputted by the docgen tool will be read in to 
 * generate [Page] and [Category] and [CompositeContainer]. 
 * Pages, Categories and CategoryItems are used to format and layout the page.
 */
// TODO(janicejl): Add a link to the dart docgen landing page in future. 
library dartdoc_viewer;

import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:dartdoc_viewer/client.dart';
import 'package:dartdoc_viewer/data.dart';
import 'package:dartdoc_viewer/item.dart';
import 'package:dartdoc_viewer/read_yaml.dart';

// TODO(janicejl): YAML path should not be hardcoded. 
// Path to the YAML file being read in. 
const sourcePath = '../../docs/library_list.txt';

/// The [Viewer] object being displayed.
final Viewer viewer = new Viewer._();

Router router;

/**
 * The Dartdoc Viewer application state.
 */
class Viewer {

  @observable Item currentLibrary;
  
  @observable Item currentTopLevel;
  
  @observable Item currentMethod;

  /// The homepage from which every [Item] can be reached.
  @observable Home homePage;
  
  /// The current page being shown.
  @observable Item currentPage;

  // Private constructor for singleton instantiation.
  Viewer._() {
    var manifest = retrieveFileContents(sourcePath);
    manifest.then((response) {
      var libraries = response.split('\n');
      currentPage = new Home(libraries);
      homePage = currentPage;
    });
  }
  
  /// The title of the current page.
  String get title => currentPage == null ? '' : currentPage.decoratedName;
  
  /// Updates the current page.
  // TODO(tmandel): Currently this is not used. Could be useful if not private.
  void _updatePage(Item page) {
    if (page != null) {
      currentPage = page;
      currentLibrary = page.path[0];
      currentTopLevel = page.path[1];
      currentMethod = page.path[2];
    }
  }
  
  /**
   * Creates a list of [Item] objects from the [path] describing the
   * path to a particular [Item] object.
   */
  List<Item> get breadcrumbs => [homePage]..addAll(currentPage.path);
  
  Item _handleTopLevel(Library library, String topLevel) {
    if (library.classes != null) {
      for (Class clazz in library.classes.content) {
        if (clazz.name == topLevel) return clazz;
      }
    }
    if (library.functions != null) {
      for (Method function in library.functions.content) {
        if (function.name == topLevel) return function;
      }
    }
    // TODO(tmandel): Handle variables somehow.
  }
  
  Item _handleMethod(Class topLevel, String member) {
    int hashIndex = member.indexOf('#');
    
    if (topLevel.functions != null) {
      for (Method function in topLevel.functions.content) {
        if (function.name == member) return function;
      }
    }
    // TODO(tmandel): Handle variables somehow.
  }
  
  Item _findChild(Library library, List members) {
    if (members.length > 1) {
      var topLevel = _handleTopLevel(library, members[1]);
      if (topLevel == null) {
        return library;
      } else {
        if (members.length > 2) {
          var method = _handleMethod(topLevel, members[2]);
          if (method == null) {
            return topLevel;
          } else {
            return method;
          }
        } else return topLevel;
      }
    } else return library;
  }
  
  /// Handles lazy loading of libraries from links not on the homepage.                               
  Item handleLink(List<String> location) {
    if (location != null) {
      var libraryName = location.first;
      var member = homePage.getMember(libraryName);
      if (member != null) {
        if (member is Placeholder) {
          homePage.loadLibrary(member).then((response) {
            var library = response;
            if (library != null)
              return _findChild(library, location);
          });
        } else {
          return _findChild(member, location);
        }
      }
    } 
  }
  
  // TODO(tmandel): This should take in a list of strings and go to the right place.
  changePage(Item page) {
    var path = []..addAll(page.path);
    path.removeWhere((element) => element == null || element == homePage);
    if (page is Placeholder || path.length == 1) {
      print('going to a library');
      router.go('libraryId', { 'libraryId' : page.name });
    } else if (path.length == 0) {
      print('going home');
      router.go('home', {});
    } else if (path.length == 2) {
      print('going to a toplevel');
      router.go('libraryId.topLevelId', { 
        'libraryId' : path[0].name,
        'topLevelId' : path[1].name 
      });
      print(router.url('libraryId.topLevelId', parameters: { 
        'libraryId' : path[0].name,
        'topLevelId' : path[1].name 
      }));
    } else if (path.length == 3) {
      print('going to a method');
      router.go('libraryId.topLevelId.methodId', { 
        'libraryId' : path[0].name,
        'topLevelId' : path[1].name,
        'methodId' : path[2].name
      });
    }
  }
}

// Handles browser navigation.
main() {
  router = new Router(useFragment: true);
  router.root
  // TODO(tmandel): Try not to end with a /.
    ..addRoute(
        name: 'home',
        path: 'home',
        defaultRoute: true)
    ..addRoute(
        name: 'libraryId',
        path: ':libraryId/',
        mount: (child) =>
          child
            ..addRoute(
                name: 'topLevelId',
                path: ':topLevelId/'));
  router.listen();
}
