/**
 * This application displays documentation generated by the docgen tool
 * found at dart-repo/dart/pkg/docgen. 
 * 
 * The Yaml file outputted by the docgen tool will be read in to 
 * generate [Page] and [Category] and [CompositeContainer]. 
 * Pages, Categories and CategoryItems are used to format and layout the page.
 */
// TODO(janicejl): Add a link to the dart docgen landing page in future. 
library dartdoc_viewer;

import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:dartdoc_viewer/data.dart';
import 'package:dartdoc_viewer/item.dart';
import 'package:dartdoc_viewer/read_yaml.dart';

// TODO(janicejl): YAML path should not be hardcoded. 
// Path to the YAML file being read in. 
const sourcePath = '../../docs/library_list.txt';

/// The [Viewer] object being displayed.
final Viewer viewer = new Viewer._();

/**
 * The Dartdoc Viewer application state.
 */
class Viewer {

  @observable Item currentLibrary;
  
  @observable Item currentTopLevel;
  
  @observable Item currentMethod;

  /// The homepage from which every [Item] can be reached.
  @observable Home homePage;
  
  /// The current page being shown.
  @observable Item currentPage;

  // Private constructor for singleton instantiation.
  Viewer._() {
    var manifest = retrieveFileContents(sourcePath);
    manifest.then((response) {
      var libraries = response.split('\n');
      currentPage = new Home(libraries);
      homePage = currentPage;
    });
  }
  
  /// The title of the current page.
  String get title => currentPage == null ? '' : currentPage.decoratedName;
  
  /**
   * Changes the currentPage to the page of the item clicked
   * without pushing state onto the history.
   */
  changePageWithoutState(Item page) {
    if (page != null) {
      currentPage = page;
    }
  }
  
  /**
   * Pushes state onto the history before updating the [currentPage].
   */
  changePage(Item page) {
    if (page is Placeholder) {
      var data = homePage.loadLibrary(page);
      data.then((response) {
        _updatePage(response);
      });
    } else if (page != null && currentPage != page) {
      _updatePage(page);
//      var state = page.path;
//      var title = 'Dart API Reference';
//      var url = origin;
//      if (state != '') {
//        var title = state.substring(0, state.length - 1);
//        url = '$origin#$state';
//      } else {
//        url = '${origin}index.html';
//      }
//      window.history.pushState(state, title, url);
    }
    changePageWithoutState(page);
  }
  
  void _updatePage(Item page) {
    currentPage = page;
    currentLibrary = page.path[0];
    currentTopLevel = page.path[1];
    currentMethod = page.path[2];
  }
  
  /**
   * Creates a list of [Item] objects from the [path] describing the
   * path to a particular [Item] object.
   */
  List<Item> get breadcrumbs => [homePage]..addAll(currentPage.path);
  
  /// Handles lazy loading of libraries from links not on the homepage.                               
  void handleLink(LinkableType type) {
    if (type.location != null) {
      var libraryName = type.location.first;
      var member = homePage.getMember(libraryName);
      if (member != null) {
        if (member is Placeholder) {
          homePage.loadLibrary(member).then((response) {
            var library = response;
            // TODO(tmandel): Deal with the other stuff.                                              
          });
        }
      }
    } else {
      homePage.libraries.forEach((element) {
        if (element is Placeholder) {
          var betterName = libraryNames[element.name];
          if (type.type.startsWith(betterName)) {
            element.loadLibrary().then((response) {
              _updateHomepage(response, element);
              router.go('other', {'path' : type.location.path});
            });
          }
        }
      });
    }
  }
}

void startHistory() {
  window.onPopState.listen((event) {
    var hash = window.location.hash.replaceFirst('#', '');
    print(hash); 
  });
}

// Handles browser navigation.
main() {
  
  startHistory();
  
  window.onPopState.listen((event) {
    if (event.state != null) {
      if (event.state != '') {
        viewer.changePageWithoutState(pageIndex[event.state]);
      }
    } else {
      viewer.changePageWithoutState(viewer.homePage);
    }
  });
}